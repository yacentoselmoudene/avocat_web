"""
Django settings for avocat project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# -------- Environment switch
ENV = os.getenv("DJANGO_ENV", "development").lower()
DEBUG = ENV != "production"

# -------- Secret key
#SECRET_KEY = 'django-insecure-)+t1wy%=dh*up@k_w7tiy%bxsdw!ffq*m!if(9+)uwno8!j!bw'
SECRET_KEY = os.getenv("SECRET_KEY", "dev-insecure-key" if DEBUG else "")
if not DEBUG and not SECRET_KEY:
    raise ValueError("SECRET_KEY env var is required in production")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = ["lmohami.ma", "www.lmohami.ma"]

# -------- CORS / CSRF
CORS_ALLOW_CREDENTIALS = False
if DEBUG:
    # Autoriser Flutter à accéder à l'API (CORS)
    # CORS_ALLOWED_ORIGINS = [
    #    "http://localhost:8000",
    #    "http://localhost:5173",
    # IP d' appareil mobile
    #    "http://192.168.1.38:8000",
    #
    # ]
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        # add your LAN if you test from a phone on Wi-Fi
        "http://192.168.1.38:5173",
        "http://192.168.1.38:8000",
    ]
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
        "http://192.168.1.38:5173",
        "http://192.168.1.38:8000",
    ]
else:
    CORS_ALLOWED_ORIGINS = [
        "https://lmohami.ma",
        "https://www.lmohami.ma",
    ]
    CSRF_TRUSTED_ORIGINS = [
        "https://lmohami.ma",
        "https://www.lmohami.ma",
    ]


if DEBUG:
    # Simple local DB (or point to your local MySQL if you prefer)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'cabinetavocat',
            'USER': 'root',
            'PASSWORD': 'Bismillah@99',
            'HOST': 'localhost',
            'PORT': '3306',
            "OPTIONS": {
                    "charset": "utf8mb4",
                    "init_command": "SET NAMES 'utf8mb4' COLLATE 'utf8mb4_unicode_ci', sql_mode='STRICT_TRANS_TABLES'",
                },
        }
    }
else:
    # MySQL on cPanel, all secrets from env
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.environ.get("DB_NAME"),
            "USER": os.environ.get("DB_USER"),
            "PASSWORD": os.environ.get("DB_PASSWORD"),
            "HOST": os.environ.get("DB_HOST", "localhost"),
            "PORT": os.environ.get("DB_PORT", "3306"),
            "OPTIONS": {
                "charset": "utf8mb4",
                # keep the session in utf8mb4 (Arabic-safe)
                "init_command": "SET NAMES 'utf8mb4' COLLATE 'utf8mb4_unicode_ci', sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }
# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',  # Pour l'authentification
    'corsheaders',  # Autorisation des requêtes depuis Flutter #added


    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'django_extensions',
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',  #  du middleware de langue
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'avocat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'avocat.wsgi.application'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'Africa/Casablanca'

USE_I18N = True
#USE_L10N = True
USE_TZ = True

# Langues supportées
LANGUAGES = [
    ('fr', 'Français'),
    ('ar', 'العربية'),
]

# Répertoire des fichiers de traduction
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# -------- Static files (your app is mounted at /api on server)
STATIC_URL = "/api/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# -------- Security hardening (prod only)
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # HSTS: enable once HTTPS works 100%
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration de Django REST Framework (DRF)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
           'rest_framework_simplejwt.authentication.JWTAuthentication',
       ],
       'DEFAULT_PERMISSION_CLASSES': [
           'rest_framework.permissions.IsAuthenticated',
       ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ]
}
#pour upload des contrats
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Logging dir: server vs local
if DEBUG:
    LOG_DIR = BASE_DIR / "logs"
else:
    LOG_DIR = "/home/lrsmfma/django_logs"

os.makedirs(LOG_DIR, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "django.log"),
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 3,
            "encoding": "utf-8",
            "level": "INFO",
        },
    },
    "loggers": {
        "django": {"handlers": ["file", "console"], "level": "INFO"},
        "django.request": {"handlers": ["file", "console"], "level": "ERROR", "propagate": False},
    },
}

#telling Django you’re behind HTTPS (usually fine on cPanel/LiteSpeed)
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
