from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from django.db.models import Q, Count, Sum, Avg, Max, Min
from django.db import transaction, connection
from django.contrib.auth.models import User
from datetime import date, datetime, timedelta
import json
import os
import uuid
import logging

# Django REST Framework imports
from rest_framework import viewsets, status, filters, routers
from rest_framework.decorators import api_view, action, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.views import APIView
from django_filters.rest_framework import DjangoFilterBackend
from django.utils import timezone

# JWT imports
from rest_framework_simplejwt.views import TokenObtainPairView

# Local imports
from .models import *
from .serializers import *
from .services import *
from api.utils.i18n import LanguageMixin

# D√©finissent les options disponibles pour les affaires p√©nales
AUTORITES_EMETTRICES = [
    ('POLICE_JUDICIAIRE', 'Police judiciaire'),
    ('GENDARMERIE', 'Gendarmerie'),
    ('PARQUET', 'Parquet'),
    ('JUGES_INSTRUCTION', 'Juges d\'instruction'),
    ('TRIBUNAL', 'Tribunal'),
    ('AUTRE', 'Autre autorit√©')
]

TYPES_ACTION_PENALE = [
    ('CONVOCATION', 'Convocation'),
    ('ARRESTATION', 'Arrestation'),
    ('GARDE_VUE', 'Garde √† vue'),
    ('AUTRE', 'Autre mesure')
]

TYPES_JUGEMENT = [
    ('PRISON', 'Prison'),
    ('AMENDE', 'Amende'),
    ('SURSIS', 'Sursis'),
    ('ACQUITTEMENT', 'Acquittement')
]

STATUTS_EXECUTION = [
    ('OUI', 'Ex√©cution faite'),
    ('NON', 'Ex√©cution non faite'),
    ('PARTIELLE', 'Ex√©cution partielle')
]

TYPES_EXECUTION = [
    ('EMPRISONNEMENT', 'Emprisonnement'),
    ('AMENDE', 'Amende'),
    ('TIG', 'Travaux d\'int√©r√™t g√©n√©ral'),
    ('SURSIS', 'Sursis'),
    ('AUTRE', 'Autre')
]

TYPES_JUGEMENT_PENAL = [
    ('ACQUITTEMENT', 'Acquittement'),
    ('PRISON', 'Prison'),
    ('AMENDE', 'Amende'),
    ('SURSIS', 'Sursis'),
    ('PRISON_AVEC_SURSIS', 'Prison avec sursis'),
    ('TRAVAUX_INTERET_GENERAL', 'Travaux d\'int√©r√™t g√©n√©ral'),
    ('AUTRE', 'Autre peine')
]

logger = logging.getLogger(__name__)

# Fonction utilitaire pour d√©terminer le type d'√©tape selon l'ID et le contexte
def get_type_etape_by_etape_id(etape_id, phase=None, role=None):
    """Retourne le bon type d'√©tape selon l'ID et le contexte"""
    
    print(f"üîç DEBUG get_type_etape_by_etape_id: etape_id={etape_id}, phase={phase}, role={role}")
    
    # DEBUG: Afficher tous les types d'√©tapes disponibles
    print(f"üîç DEBUG: Types d'√©tapes disponibles en base:")
    all_types = TypeEtape.objects.all().order_by('idtypeetape')
    for t in all_types:
        print(f"   ID {t.idtypeetape}: {t.libelletypeetape}")
    
    # Mapping des √©tapes existantes avec leurs IDs
    mapping_etapes = {
        # √âtapes civiles (fallback)
        "etape_0": 4,    # "ÿ•ŸÜÿ¨ÿßÿ≤ ÿ•ŸÜÿ∞ÿßÿ±" (ID 4)
        "etape_1": 5,    # "ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿ¥ŸÉÿßŸäÿ©" (ID 5)
        "etape_2": 6,    # "ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿØÿπŸàŸâ ŸÖÿ®ÿßÿ¥ÿ±ÿ©" (ID 6)
        "etape_3": 3,    # "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ¥ŸÉÿßŸäÿ©" (ID 3)
        
        # √âtapes sp√©ciales selon la phase et le r√¥le
        "INITIALE_demandeur": {
            "etape_0": 4,    # "ÿ•ŸÜÿ¨ÿßÿ≤ ÿ•ŸÜÿ∞ÿßÿ±"
            "etape_1": 5,    # "ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿ¥ŸÉÿßŸäÿ©"
            "etape_2": 6,    # "ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿØÿπŸàŸâ ŸÖÿ®ÿßÿ¥ÿ±ÿ©"
        },
        "INITIALE_opposant": {
            "etape_0": 1,    # "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ•ŸÜÿ∞ÿßÿ±"
            "etape_1": 3,    # "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ¥ŸÉÿßŸäÿ©"
            "etape_2": 2,    # "ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸÑŸÑŸÖÿ´ŸàŸÑ"
        },
        "PROCEDURE_demandeur": {
            "etape_0": 10,   # "ÿ¨ŸÑÿ≥ÿßÿ™" (sessions)
            "etape_1": 13,   # "ÿ™ÿ®ŸÑŸäÿ∫ ÿßŸÑÿßÿ≥ÿ™ÿØÿπÿßÿ°"
            "etape_2": 9,    # "ŸÖÿØÿßŸàŸÑÿ©"
            "etape_3": 11,   # "ÿ≠ŸÉŸÖ"
        },
        "PROCEDURE_opposant": {
            "etape_0": 7,    # "ÿ™ŸÇÿØŸäŸÖ ÿ™ŸÖÿ´ŸäŸÑ"
            "etape_1": 8,    # "ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑŸÖŸÇÿßŸÑ"
            "etape_2": 9,    # "ŸÖÿØÿßŸàŸÑÿ©"
            "etape_3": 11,   # "ÿ≠ŸÉŸÖ"
        },
        "EXECUTION_demandeur": {
            "etape_0": 11,   # "ÿ≠ŸÉŸÖ" (pour l'ex√©cution)
        },
        "EXECUTION_opposant": {
            "etape_0": 11,   # "ÿ≠ŸÉŸÖ" (pour l'ex√©cution)
        }
    }
    
    try:
        print(f"üîç DEBUG: V√©rification du mapping contextuel...")
        # Si on a une phase et un r√¥le, utiliser le mapping contextuel
        if phase and role:
            context_key = f"{phase}_{role}"
            print(f"üîç DEBUG: context_key = {context_key}")
            if context_key in mapping_etapes:
                etape_mapping = mapping_etapes[context_key]
                print(f"üîç DEBUG: etape_mapping trouv√©: {etape_mapping}")
                if etape_id in etape_mapping:
                    type_id = etape_mapping[etape_id]
                    print(f"üîç DEBUG: Type ID trouv√© dans le mapping contextuel: {type_id}")
                    return TypeEtape.objects.get(idtypeetape=type_id)
                else:
                    print(f"üîç DEBUG: etape_id {etape_id} non trouv√© dans le mapping contextuel")
            else:
                print(f"üîç DEBUG: context_key {context_key} non trouv√© dans le mapping")
        
        print(f"üîç DEBUG: Utilisation du mapping simple...")
        # Sinon, utiliser le mapping simple
        if etape_id in mapping_etapes:
            type_id = mapping_etapes[etape_id]
            print(f"üîç DEBUG: Type ID trouv√© dans le mapping simple: {type_id}")
            return TypeEtape.objects.get(idtypeetape=type_id)
        else:
            print(f"üîç DEBUG: etape_id {etape_id} non trouv√© dans le mapping simple")
        
        print(f"üîç DEBUG: Fallback vers le premier type disponible...")
        # Fallback : premier type disponible
        fallback_type = TypeEtape.objects.first()
        print(f"üîç DEBUG: Type de fallback: {fallback_type}")
        if fallback_type:
            return fallback_type
        else:
            print(f"‚ùå ERREUR CRITIQUE: Aucun type d'√©tape disponible en base!")
            return None
        
    except TypeEtape.DoesNotExist as e:
        print(f"‚ùå Type d'√©tape non trouv√© pour {etape_id}: {str(e)}")
        fallback_type = TypeEtape.objects.first()  # Fallback
        print(f"üîç DEBUG: Type de fallback apr√®s erreur: {fallback_type}")
        if fallback_type:
            return fallback_type
        else:
            print(f"‚ùå ERREUR CRITIQUE: Aucun type d'√©tape disponible en base!")
            return None
    except Exception as e:
        print(f"‚ùå Erreur inattendue dans get_type_etape_by_etape_id: {str(e)}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        fallback_type = TypeEtape.objects.first()  # Fallback
        print(f"üîç DEBUG: Type de fallback apr√®s erreur inattendue: {fallback_type}")
        if fallback_type:
            return fallback_type
        else:
            print(f"‚ùå ERREUR CRITIQUE: Aucun type d'√©tape disponible en base!")
            return None

# Fonction de maintenance pour mettre √† jour les √©tapes existantes sans type
def update_existing_etapes_without_type():
    try:
        etapes_sans_type = Etapejudiciaire.objects.filter(idtypeetape__isnull=True)
        print(f"üîÑ Mise √† jour de {etapes_sans_type.count()} √©tapes sans type...")
        
        for etape in etapes_sans_type:
            try:
                # Essayer de d√©terminer le type d'√©tape selon l'ID
                if '_' in str(etape.idetape):
                    # ID au format etape_X_affaire_Y_hash
                    parts = etape.idetape.split('_')
                    if len(parts) >= 2:
                        etape_id = f"etape_{parts[1]}"
                        type_etape = get_type_etape_by_etape_id(etape_id)
                        if type_etape:
                            etape.idtypeetape = type_etape
                            etape.save()
                            print(f"‚úÖ √âtape {etape.idetape} mise √† jour avec type: {type_etape.libelletypeetape}")
                        else:
                            print(f"‚ö†Ô∏è Impossible de d√©terminer le type pour {etape.idetape}")
                else:
                    # ID simple, essayer de le traiter comme un ordre
                    try:
                        ordre = int(etape.idetape)
                        type_etape = get_type_etape_by_etape_id(f"etape_{ordre}")
                        if type_etape:
                            etape.idtypeetape = type_etape
                            etape.save()
                            print(f"‚úÖ √âtape {etape.idetape} mise √† jour avec type: {type_etape.libelletypeetape}")
                        else:
                            print(f"‚ö†Ô∏è Impossible de d√©terminer le type pour {etape.idetape}")
                    except ValueError:
                        print(f"‚ö†Ô∏è ID d'√©tape non num√©rique: {etape.idetape}")
                        
            except Exception as e:
                print(f"‚ùå Erreur lors de la mise √† jour de l'√©tape {etape.idetape}: {str(e)}")
        
        print(f"‚úÖ Mise √† jour termin√©e!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour des √©tapes: {str(e)}")



# ViewSet pour la gestion des clients avec recherche et suppression en cascade
class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.all()
    serializer_class = ClientProfileSerializer
    
    def get_queryset(self):
        queryset = Client.objects.all()
        search = self.request.query_params.get('search', None)
        type_filter = self.request.query_params.get('type', None)
        
        if search:
            queryset = queryset.filter(
                Q(nomclient_fr__icontains=search) |
                Q(nomclient_ar__icontains=search) |
                Q(prenomclient_fr__icontains=search) |
                Q(prenomclient_ar__icontains=search) |
                Q(email__icontains=search) |
                Q(numtel1__icontains=search) |
                Q(numtel2__icontains=search)
            )
        
        if type_filter:
            # Filtrer par type (fran√ßais ou arabe)
            queryset = queryset.filter(
                Q(idtypeclient__libelletypeclient_fr__icontains=type_filter) |
                Q(idtypeclient__libelletypeclient_ar__icontains=type_filter)
            )
        
        return queryset
    
    def destroy(self, request, *args, **kwargs):
        try:
            with transaction.atomic():
                client = self.get_object()
                Affairejudiciaire.objects.filter(idclient=client).delete()
                Contrat.objects.filter(idclient=client).delete()
                Facture.objects.filter(idclient=client).delete()

                if client.user:
                    client.user.delete()
                
                client.delete()
                return Response({'message': 'Client supprim√© avec succ√®s'}, status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({
                'error': f'Erreur lors de la suppression du client: {str(e)}'
            }, status=status.HTTP_400_BAD_REQUEST)


# ViewSet pour le profil client mobile avec gestion des types (soci√©t√©/particulier)
class ClientMeView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        try:
            client = Client.objects.get(user=request.user)
        except Client.DoesNotExist:
            return Response({'detail': 'Not a client'}, status=404)
        serializer = ClientProfileSerializer(client)
        return Response(serializer.data)

    def patch(self, request):
        try:
            client = Client.objects.get(user=request.user)
        except Client.DoesNotExist:
            return Response({'detail': 'Not a client'}, status=404)

        # Autoriser uniquement la mise √† jour de preferred_language
        preferred_language = request.data.get('preferred_language')
        if preferred_language not in (None, 'fr', 'ar'):
            return Response({'error': "preferred_language doit √™tre 'fr' ou 'ar'"}, status=status.HTTP_400_BAD_REQUEST)

        if preferred_language is not None:
            client.preferred_language = preferred_language
            client.save(update_fields=['preferred_language'])

        serializer = ClientProfileSerializer(client)
        return Response(serializer.data)


# ViewSet principal pour la gestion des affaires judiciaires avec filtrage automatique
class AffairejudiciaireViewSet(viewsets.ModelViewSet):
    serializer_class = AffairejudiciaireSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['idtypeaffaire', 'phase_processus']
    search_fields = ['numero_dossier', 'code_dossier']
    ordering_fields = ['dateouverture', 'datecloture']

    def get_queryset(self):
        """
        Filtrage automatique selon le type d'utilisateur :
        - Client  : voit seulement ses affaires
        - Staff/Avocat  : voit toutes les affaires
        """
        user = self.request.user
        
        # Client  (app mobile)
        if hasattr(user, 'client') and user.client:
            print(f"üîç Client connect√©: {user.username} (ID: {user.client.idclient})")
            queryset = Affairejudiciaire.objects.filter(
                idclient=user.client.idclient
            )
            print(f"üìä Affaires trouv√©es pour le client: {queryset.count()}")
            
        # Staff/Avocat  (app web)
        elif user.is_staff:
            print(f"üë®‚Äçüíº Staff connect√©: {user.username} - Acc√®s √† toutes les affaires".encode("utf-8", "ignore").decode())
            queryset = Affairejudiciaire.objects.all()
            print(f"üìä Total affaires dans la base: {queryset.count()}")
            
        # Utilisateur non autoris√©
        else:
            print(f"‚ùå Utilisateur non autoris√©: {user.username}")
            queryset = Affairejudiciaire.objects.none()
        
        # Filtres additionnels
        statut = self.request.query_params.get('statut', None)
        if statut:
            if statut == 'actives':
                queryset = queryset.filter(datecloture__isnull=True)
                print(f"üîç Filtre 'actives' appliqu√©: {queryset.count()} affaires")
            elif statut == 'terminees':
                queryset = queryset.filter(datecloture__isnull=False)
                print(f"üîç Filtre 'terminees' appliqu√©: {queryset.count()} affaires")
        
        return queryset


    # debug
    @action(detail=False, methods=['get'])
    def debug_info(self, request):
        # Endpoint de debug pour v√©rifier le filtrage des affaires
        user = request.user
        debug_info = {
            'user_info': {
                'username': user.username,
                'is_staff': user.is_staff,
                'is_superuser': user.is_superuser,
                'user_id': user.id,
            },
            'client_info': None,
            'affaires_count': 0,
            'affaires_details': []
        }

        # Informations sur le client
        if hasattr(user, 'client') and user.client:
            debug_info['client_info'] = {
                'client_id': user.client.idclient,
                'nom': user.client.nomclient,
                'prenom': user.client.prenomclient_fr or user.client.prenomclient_ar or '',
                'email': user.client.email
            }

        # Compter les affaires selon le filtrage
        queryset = self.get_queryset()
        debug_info['affaires_count'] = queryset.count()

        # D√©tails des affaires 5 pour √©viter la surcharge
        affaires_sample = queryset[:5]
        for affaire in affaires_sample:
            debug_info['affaires_details'].append({
                'id': affaire.idaffaire,
                'numero_dossier': affaire.numero_dossier,
                'code_dossier': affaire.code_dossier,
                'annee_dossier': affaire.annee_dossier,
                'client_id': affaire.idclient.idclient if affaire.idclient else None,
                'date_ouverture': affaire.dateouverture.isoformat() if affaire.dateouverture else None,
                'date_cloture': affaire.datecloture.isoformat() if affaire.datecloture else None
            })

        return Response(debug_info)

    @action(detail=False, methods=['get'])
    def client_statistics(self, request):
        # Endpoint pour r√©cup√©rer les statistiques du client

        try:
            user = request.user

            # l'utilisateur est un client
            if not hasattr(user, 'client') or not user.client:
                return Response(
                    {'error': 'Acc√®s r√©serv√© aux clients'},
                    status=status.HTTP_403_FORBIDDEN
                )

            client = user.client
            client_id = client.idclient

            print(f"üîç Statistiques demand√©es pour le client: {client.nomclient} (ID: {client_id})")

            #  Nombre d'affaires actives du client
            affaires_count = Affairejudiciaire.objects.filter(
                idclient=client_id,
                datecloture__isnull=True  # Affaires non cl√¥tur√©es
            ).count()

            print(f"üìä Affaires actives trouv√©es: {affaires_count}")

            #  Prochaine audience du client
            affaires_client = Affairejudiciaire.objects.filter(
                idclient=client_id
            ).values_list('idaffaire', flat=True)

            prochaine_audience = None
            if affaires_client.exists():
                prochaine_audience_obj = Audience.objects.filter(
                    idaffaire__in=affaires_client,
                    dateaudience__gte=date.today()  # a partir d'aujourd'hui
                ).order_by('dateaudience', 'heureaudience').first()

                if prochaine_audience_obj:

                    try:
                        type_rdv = getattr(prochaine_audience_obj, 'type_rendez_vous')
                    except Exception:
                        type_rdv = None
                    try:
                        type_rdv_display = prochaine_audience_obj.get_type_rendez_vous_display() if hasattr(prochaine_audience_obj, 'get_type_rendez_vous_display') else None
                    except Exception:
                        type_rdv_display = None
                    titre = getattr(prochaine_audience_obj, 'titre', None)
                    lieu = getattr(prochaine_audience_obj, 'lieu', None)
                    statut = getattr(prochaine_audience_obj, 'statut', None)
                    description = getattr(prochaine_audience_obj, 'description', None)

                    tribunal_nom = (prochaine_audience_obj.idtribunal.nomtribunal_fr or prochaine_audience_obj.idtribunal.nomtribunal_ar or '') if prochaine_audience_obj.idtribunal else None
                    tribunal_adresse = (prochaine_audience_obj.idtribunal.adressetribunal_fr or prochaine_audience_obj.idtribunal.adressetribunal_ar or '') if prochaine_audience_obj.idtribunal else None

                    # Fallback lieu si non renseign√©: composer depuis tribunal
                    if (lieu or '').strip() == '' and (tribunal_nom or tribunal_adresse):
                        composed = " - ".join([s for s in [tribunal_nom, tribunal_adresse] if s and str(s).strip()])
                        lieu = composed or None

                    prochaine_audience = {
                        'date': prochaine_audience_obj.dateaudience.isoformat(),
                        'heure': prochaine_audience_obj.heureaudience.isoformat() if prochaine_audience_obj.heureaudience else None,
                        'affaire_id': prochaine_audience_obj.idaffaire.idaffaire,
                        'affaire_numero': prochaine_audience_obj.idaffaire.numero_dossier,
                        'tribunal': tribunal_nom,
                        'adresse': tribunal_adresse,
                        'remarques': prochaine_audience_obj.remarques,
                        'type_rendez_vous': type_rdv or 'AUDIENCE',
                        'type_rendez_vous_display': type_rdv_display or 'Audience',
                        'titre': titre,
                        'lieu': lieu,
                        'statut': statut,
                        'description': description,
                    }
                    print(f"üìÖ Prochaine audience trouv√©e: {prochaine_audience['date']}")
                else:
                    print(f"üìÖ Aucune audience future trouv√©e")

            #  Statistiques des factures du client
            factures = Facture.objects.filter(idclient=client_id)
            factures_count = factures.count()
            factures_total_montant = factures.aggregate(
                total=Sum('montantfacture')
            )['total'] or 0.0

            print(f"üí∞ Factures trouv√©es: {factures_count}, Montant total: {factures_total_montant}")

            # Nombre de documents du client
            documents_count = Fichier.objects.filter(
                affaire__in=affaires_client
            ).count()

            print(f"üìÑ Documents trouv√©s: {documents_count}")

            # R√©sum√© des statistiques
            statistics = {
                'client_info': {
                    'id': client_id,
                    'nom': client.nomclient,
                    'prenom': client.prenomclient_fr or client.prenomclient_ar or '',
                    'email': client.email
                },
                'affaires': {
                    'count': affaires_count,
                    'actives': affaires_count,
                    'terminees': Affairejudiciaire.objects.filter(
                        idclient=client_id,
                        datecloture__isnull=False
                    ).count()
                },
                'prochaine_audience': prochaine_audience,
                'factures': {
                    'count': factures_count,
                    'total_montant': factures_total_montant,
                    'moyenne': factures_total_montant / factures_count if factures_count > 0 else 0
                },
                'documents': {
                    'count': documents_count
                },
                'timestamp': datetime.now().isoformat()
            }

            print(f"‚úÖ Statistiques g√©n√©r√©es avec succ√®s pour le client {client_id}")
            return Response(statistics)

        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration des statistiques: {str(e)}")
            return Response(
                {'error': f'Erreur lors de la g√©n√©ration des statistiques: {str(e)}'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    def create(self, request, *args, **kwargs):
        with transaction.atomic():
            data = request.data.copy()
            role_client = data.get('roleClient')
            idclient = data.get('idclient')
            
            affaire = None
            opposant = None
            # Cr√©ation de l'affaire sans opposant pour l'instant
            serializer = self.get_serializer(data=data)
            serializer.is_valid(raise_exception=True)
            affaire = serializer.save()
            
            # Si le r√¥le est opposant, cr√©er un opposant et lier √† l'affaire
            if role_client == 'opposant' and idclient:
                try:
                    client = Client.objects.get(pk=idclient)
                    opposant, created = Opposant.objects.get_or_create(
                        nomopposant_fr=client.nomclient_fr,
                        nomopposant_ar=client.nomclient_ar,
                        defaults={
                            'adresse1_fr': client.adresse1_fr,
                            'adresse1_ar': client.adresse1_ar,
                            'adresse2_fr': client.adresse2_fr,
                            'adresse2_ar': client.adresse2_ar,
                            'numtel1': client.numtel1,
                            'numtel2': client.numtel2,
                            'email': client.email,
                        }
                    )
                    
                    # Mettre √† jour l'opposant si il existait d√©j√†
                    if not created:
                        opposant.adresse1 = client.adresse1
                        opposant.adresse2 = client.adresse2
                        opposant.numtel1 = client.numtel1
                        opposant.numtel2 = client.numtel2
                        opposant.email = client.email
                        opposant.save()
                    
                    #  l'enregistrement dans AffaireOpposantAvocat
                    #  avocat temporaire
                    avocat_default = Avocat.objects.first()
                    
                    if not avocat_default:
                        #  un avocat temporaire avec un ID par d√©faut
                        avocat_default, created = Avocat.objects.get_or_create(
                            idavocat='TEMP001',
                            defaults={
                                'nomavocat': 'Avocat temporaire',
                                'specialisation': '√Ä d√©finir'
                            }
                        )
                    
                    relation = AffaireOpposantAvocat.objects.create(
                        affaire=affaire,
                        opposant=opposant,
                        avocat=avocat_default,
                        role_avocat='√Ä d√©finir',
                        actif=True
                    )
                    
                    affaire.idopposant = opposant
                    affaire.save()
                except Client.DoesNotExist:
                    pass
            else:
                pass
            
            # Cr√©er automatiquement l'√©tape actuelle selon la logique unifi√©e
            try:
                from .services import get_etape_actuelle_par_phase
                etape_actuelle = get_etape_actuelle_par_phase(affaire)
                if etape_actuelle:
                    affaire.etape_actuelle = etape_actuelle
                    affaire.save()
                    print(f"‚úÖ √âtape actuelle cr√©√©e pour l'affaire {affaire.idaffaire}: {etape_actuelle.idtypeetape.libelletypeetape if etape_actuelle.idtypeetape else 'Sans type'}")
                else:
                    print(f"‚ö†Ô∏è Aucune √©tape actuelle cr√©√©e pour l'affaire {affaire.idaffaire}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation de l'√©tape actuelle: {e}")
            
            headers = self.get_success_headers(serializer.data)
            return Response(self.get_serializer(affaire).data, status=status.HTTP_201_CREATED, headers=headers)

    def destroy(self, request, *args, **kwargs):
        try:
            with transaction.atomic():
                affaire = self.get_object()
                affaire.etape_actuelle = None
                affaire.save()

                from .models import StatutEtape
                etapes = Etapejudiciaire.objects.filter(idaffaire=affaire)
                for etape in etapes:
                    StatutEtape.objects.filter(idetape=etape).delete()
                

                Etapejudiciaire.objects.filter(idaffaire=affaire).delete()

                Audience.objects.filter(idaffaire=affaire).delete()
                StatutAffaire.objects.filter(idaffaire=affaire).delete()
                
                #  relations opposant-avocat
                AffaireOpposantAvocat.objects.filter(affaire=affaire).delete()
                
                #relations affaire-tribunal
                try:
                    with connection.cursor() as cursor:
                        cursor.execute("DELETE FROM affairetribunal WHERE idAffaire = %s", [affaire.idaffaire])
                except Exception as e:
                    print(f"Erreur lors de la suppression des relations affaire-tribunal: {e}")
                
                #  les donn√©es d'ex√©cution
                try:
                    from .models import PVExecution
                    PVExecution.objects.filter(etape__idaffaire=affaire).delete()
                except ImportError:
                    pass  # Le mod√®le n'existe pas, on continue
                
                #  les fichiers associ√©s
                try:
                    from .models import Fichier
                    Fichier.objects.filter(affaire=affaire).delete()
                except ImportError:
                    pass  # Le mod√®le n'existe pas, on continue
                
                # supprimer l'affaire
                affaire.delete()
                return Response({'message': 'Affaire supprim√©e avec succ√®s'}, status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response({
                'error': f'Erreur lors de la suppression de l\'affaire: {str(e)}'
            }, status=status.HTTP_400_BAD_REQUEST)




# ViewSet pour cr√©er des utilisateurs Django simples
class CreateUserView(APIView):
    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')
        if not username or not password:
            return Response({'error': 'username and password required'}, status=400)
        if User.objects.filter(username=username).exists():
            return Response({'error': 'username already exists'}, status=400)
        user = User.objects.create_user(username=username, password=password)
        return Response({'id': user.id, 'username': user.username})


# ViewSet personnalis√© pour l'authentification JWT avec restrictions d'acc√®s
class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer




# ViewSet pour cr√©er des clients et utilisateurs en une seule op√©ration

class CreateClientView(APIView):
    def post(self, request):
        try:
            with transaction.atomic():
                user = User.objects.create_user(
                    username=request.data['username'],
                    password=request.data['password']
                )
                idtypeclient = request.data['idtypeclient']
                if isinstance(idtypeclient, dict) and 'idtypeclient' in idtypeclient:
                    idtypeclient = idtypeclient['idtypeclient']
                elif not isinstance(idtypeclient, (int, str)):
                    raise ValueError(f"idtypeclient doit √™tre un nombre, re√ßu: {type(idtypeclient)}")
                def get_first(data, key):
                    v = data.getlist(key)
                    return v[0] if v else ''
                client = Client.objects.create(
                    nomclient_fr=get_first(request.data, 'nomclient_fr'),
                    nomclient_ar=get_first(request.data, 'nomclient_ar'),
                    prenomclient_fr=get_first(request.data, 'prenomclient_fr'),
                    prenomclient_ar=get_first(request.data, 'prenomclient_ar'),
                    email=get_first(request.data, 'email'),
                    numtel1=get_first(request.data, 'numtel1'),
                    numtel2=get_first(request.data, 'numtel2'),
                    adresse1_fr=get_first(request.data, 'adresse1_fr'),
                    adresse1_ar=get_first(request.data, 'adresse1_ar'),
                    adresse2_fr=get_first(request.data, 'adresse2_fr'),
                    adresse2_ar=get_first(request.data, 'adresse2_ar'),
                    idtypeclient_id=idtypeclient,
                    user=user,
                )
                contrat = None
                if request.data.get('is_societe') and request.FILES.get('fichier'):
                    fichier = request.FILES.get('fichier')
                    contrat = Contrat.objects.create(
                        idclient=client,
                        fichier=fichier
                    )
                type_client = client.idtypeclient
                return Response({
                    'success': True,
                    'message': 'Client cr√©√© avec succ√®s',
                    'client': {
                        'idclient': client.idclient,
                        'nomclient_fr': client.nomclient_fr,
                        'nomclient_ar': client.nomclient_ar,
                        'nomclient': client.nomclient,  # Pour compatibilit√©
                        'prenomclient_fr': client.prenomclient_fr,
                        'prenomclient_ar': client.prenomclient_ar,
                        'adresse1_fr': client.adresse1_fr,
                        'adresse1_ar': client.adresse1_ar,
                        'adresse1': client.adresse1,  # Pour compatibilit√©
                        'adresse2_fr': client.adresse2_fr,
                        'adresse2_ar': client.adresse2_ar,
                        'adresse2': client.adresse2,  # Pour compatibilit√©
                        'type_client': type_client.libelletypeclient_fr or type_client.libelletypeclient_ar or '',
                        'user_id': user.id
                    },
                    'contrat': contrat.idcontrat if contrat else None
                }, status=status.HTTP_201_CREATED)
        except User.DoesNotExist:
            return Response({
                'error': 'Erreur lors de la cr√©ation de l\'utilisateur'
            }, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({
                'error': f'Erreur lors de la cr√©ation du client: {str(e)}'
            }, status=status.HTTP_400_BAD_REQUEST)






# ViewSet pour la gestion des statuts d'affaires avec gestion automatique des dates
class StatutAffaireViewSet(viewsets.ModelViewSet):
    queryset = StatutAffaire.objects.all()
    serializer_class = StatutAffaireSerializer

    def perform_create(self, serializer):
        idaffaire = self.request.data.get('idaffaire')
        nouvelle_date_debut = self.request.data.get('datedebut')
        if idaffaire:
            dernier_statut = StatutAffaire.objects.filter(
                idaffaire=idaffaire, datefin__isnull=True
            ).order_by('-datedebut').first()
            if dernier_statut:
                #  la date de d√©but du nouveau statut si fournie, sinon la date du jour
                dernier_statut.datefin = nouvelle_date_debut or date.today()
                dernier_statut.save()
        serializer.save()

# ViewSet pour la gestion des relations affaires-tribunaux
class AffairetribunalViewSet(viewsets.ModelViewSet):
    queryset = Affairetribunal.objects.all()
    serializer_class = AffairetribunalSerializer


# ViewSet principal pour la gestion des audiences et rendez-vous avec normalisation des donn√©es
class AudienceViewSet(viewsets.ModelViewSet):
    queryset = Audience.objects.all()
    serializer_class = AudienceSerializer

    def create(self, request, *args, **kwargs):
        """Normalise les champs vides en null pour √©viter les erreurs 400 """
        from rest_framework.response import Response
        from rest_framework import status
        from rest_framework.exceptions import ValidationError
        data = request.data.copy()
        nullable_fields = ['heureaudience', 'lieu', 'description', 'remarques', 'idtribunal', 'titre']
        for field in nullable_fields:
            value = data.get(field, None)
            if value == '' or value == '':
                data[field] = None
        # idaffaire peut √™tre soit un objet, soit un id
        idaffaire_value = data.get('idaffaire')
        try:
            if isinstance(idaffaire_value, dict) and 'idaffaire' in idaffaire_value:
                data['idaffaire'] = idaffaire_value['idaffaire']
        except Exception:
            pass
        try:
            print("\nüü¶ DEBUG RDV: payload re√ßu:", dict(request.data))
            print("üü¶ DEBUG RDV: payload normalis√©:", dict(data))
            serializer = self.get_serializer(data=data)
            if not serializer.is_valid():
                print("üü• DEBUG RDV: erreurs de validation:", serializer.errors)
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
            self.perform_create(serializer)
            headers = self.get_success_headers(serializer.data)
            print("üü© DEBUG RDV: cr√©ation OK, idaudience:", serializer.data.get('idaudience'))
            return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
        except ValidationError as ve:
            print("üü• DEBUG RDV: ValidationError lev√©e:", getattr(ve, 'detail', str(ve)))
            raise
        except Exception as e:
            print("üü• DEBUG RDV: exception inattendue:", str(e))
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    def get_queryset(self):
        queryset = super().get_queryset()
        idaffaire = self.request.query_params.get('idaffaire')
        idclient = self.request.query_params.get('idclient')
        future_only = self.request.query_params.get('future_only')
        type_rdv = self.request.query_params.get('type_rendez_vous')
        statut = self.request.query_params.get('statut')
        mine_only = self.request.query_params.get('mine_only')

        # Filtre par affaire (via la cl√© √©trang√®re idaffaire_id)
        if idaffaire is not None:
            try:
                queryset = queryset.filter(idaffaire_id=int(idaffaire))
            except (TypeError, ValueError):
                pass

        # Filtre par client (via l'affaire li√©e)
        if idclient is not None:
            try:
                queryset = queryset.filter(idaffaire__idclient_id=int(idclient))
            except (TypeError, ValueError):
                pass

        # Option: ne retourner que les audiences futures
        if future_only in ("1", "true", "True"):
            from datetime import date
            queryset = queryset.filter(dateaudience__gte=date.today()).order_by('dateaudience', 'heureaudience')
        else:
            queryset = queryset.order_by('-dateaudience')

        # Filtre par type de rendez-vous
        if type_rdv:
            queryset = queryset.filter(type_rendez_vous=type_rdv)

        # Filtre par statut
        if statut:
            queryset = queryset.filter(statut=statut)

        # Limiter aux rendez-vous du client connect√© (app mobile)
        user = getattr(self.request, 'user', None)
        if mine_only in ("1", "true", "True") and user and hasattr(user, 'client') and user.client:
            queryset = queryset.filter(idaffaire__idclient=user.client.idclient)

        return queryset

    @action(detail=False, methods=['get'])
    def types_disponibles(self, request):
        try:
            types = getattr(Audience, 'TYPE_RDV_CHOICES', [])
            statuts = getattr(Audience, 'STATUT_RDV_CHOICES', [])
            return Response({
                'types': types,
                'statuts': statuts
            })
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=False, methods=['get'])
    def agenda_client(self, request):
        """R√©cup√®re l'agenda complet du client connect√© (app mobile)"""
        try:
            user = request.user
            if not hasattr(user, 'client') or not user.client:
                return Response({'error': 'Acc√®s non autoris√©'}, status=status.HTTP_403_FORBIDDEN)
            
            client_id = user.client.idclient
            today = date.today()
            
            # Prochain rendez-vous
            prochain_rdv = Audience.objects.filter(
                idaffaire__idclient=client_id,
                dateaudience__gte=today,
                statut__in=['PLANIFIE', 'CONFIRME']
            ).order_by('dateaudience', 'heureaudience').first()
            
            # Tous les rendez-vous futurs
            rdv_futurs = Audience.objects.filter(
                idaffaire__idclient=client_id,
                dateaudience__gte=today
            ).order_by('dateaudience', 'heureaudience')
            
            # Statistiques par type
            stats_par_type = Audience.objects.filter(
                idaffaire__idclient=client_id,
                dateaudience__gte=today
            ).values('type_rendez_vous').annotate(
                count=Count('idaudience')
            )
            
            # Statistiques par statut
            stats_par_statut = Audience.objects.filter(
                idaffaire__idclient=client_id,
                dateaudience__gte=today
            ).values('statut').annotate(
                count=Count('idaudience')
            )
            
            return Response({
                'prochain_rdv': AudienceSerializer(prochain_rdv).data if prochain_rdv else None,
                'rdv_futurs': AudienceSerializer(rdv_futurs, many=True).data,
                'statistiques': {
                    'par_type': list(stats_par_type),
                    'par_statut': list(stats_par_statut),
                    'total_futurs': rdv_futurs.count()
                }
            })
            
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['post'])
    def toggle_reminder(self, request, pk=None):
        """Active/d√©sactive les rappels pour un rendez-vous sp√©cifique"""
        try:
            audience = self.get_object()
            reminder_type = request.data.get('reminder_type')  # '24h' ou '1h'
            
            if reminder_type == '24h':
                audience.rappel_24h = not audience.rappel_24h
                audience.save(update_fields=['rappel_24h'])
                return Response({
                    'rappel_24h': audience.rappel_24h,
                    'message': f"Rappel 24h {'activ√©' if audience.rappel_24h else 'd√©sactiv√©'}"
                })
            elif reminder_type == '1h':
                audience.rappel_1h = not audience.rappel_1h
                audience.save(update_fields=['rappel_1h'])
                return Response({
                    'rappel_1h': audience.rappel_1h,
                    'message': f"Rappel 1h {'activ√©' if audience.rappel_1h else 'd√©sactiv√©'}"
                })
            else:
                return Response({'error': 'Type de rappel invalide'}, status=status.HTTP_400_BAD_REQUEST)
                
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    def perform_create(self, serializer):
        import uuid
        from datetime import date
        data = self.request.data
        idaudience = data.get('idaudience')
        if not idaudience:
            idaudience = f"AUD-{date.today().strftime('%Y%m%d')}-{uuid.uuid4().hex[:8]}"
        # Cr√©er d'abord sans passer cree_par pour √©viter les erreurs de kwargs inattendus
        instance = serializer.save(idaudience=idaudience)
        # Puis, si le champ existe et l'utilisateur est authentifi√©, l'assigner
        try:
            if hasattr(instance, 'cree_par') and getattr(self.request, 'user', None) and self.request.user.is_authenticated:
                instance.cree_par = self.request.user
                instance.save(update_fields=['cree_par'])
        except Exception:
            # Ne pas casser la cr√©ation si ce champ n'existe pas dans le sch√©ma en cours
            pass




# ViewSet pour la gestion des avocats
class AvocatViewSet(viewsets.ModelViewSet):
    queryset = Avocat.objects.all()
    serializer_class = AvocatSerializer




# ViewSets avec logique m√©tier complexe et filtrage automatique

# ViewSet pour la gestion des contrats avec filtrage automatique selon le type d'utilisateur
class ContratViewSet(viewsets.ModelViewSet):
    serializer_class = ContratSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        """
        Filtrage automatique selon le type d'utilisateur :
        - Client connect√© : voit seulement ses contrats
        - Staff/Avocat connect√© : voit tous les contrats
        """
        user = self.request.user
        
        # Client connect√©
        if hasattr(user, 'client') and user.client:
            print(f"üîç Client connect√©: {user.username} (ID: {user.client.idclient})")
            queryset = Contrat.objects.filter(
                idclient=user.client.idclient
            )
            print(f"üìÑ Contrats trouv√©s pour le client: {queryset.count()}")
            
        # Staff/Avocat connect√©
        elif user.is_staff:
            print(f"üë®‚Äçüíº Staff connect√©: {user.username} - Acc√®s √† tous les contrats")
            queryset = Contrat.objects.all()
            print(f"üìÑ Total contrats dans la base: {queryset.count()}")
            
        # Utilisateur non autoris√©
        else:
            print(f"‚ùå Utilisateur non autoris√©: {user.username}")
            queryset = Contrat.objects.none()
        
        return queryset
    
    def get_serializer_context(self):
        """ le contexte de la requ√™te pour g√©n√©rer les URLs"""
        context = super().get_serializer_context()
        context['request'] = self.request
        return context

# ViewSets pour la gestion du processus judiciaire et des √©tapes

class EtapejudiciaireViewSet(viewsets.ModelViewSet):
    queryset = Etapejudiciaire.objects.all()
    serializer_class = EtapejudiciaireSerializer
    
    def get_queryset(self):
        queryset = Etapejudiciaire.objects.all()
        affaire_id = self.request.query_params.get('idaffaire', None)
        if affaire_id is not None:
            queryset = queryset.filter(idaffaire=affaire_id)
        return queryset
    
    def destroy(self, request, *args, **kwargs):
        try:
            with transaction.atomic():
                etape = self.get_object()
                etape_id = etape.idetape
                
                print(f"DEBUG: Tentative de suppression de l'√©tape {etape_id}")
                
                # V√©rifie et supprime les statuts d'√©tape
                statuts_count = StatutEtape.objects.filter(idetape=etape).count()
                print(f"DEBUG: {statuts_count} statuts trouv√©s pour l'√©tape {etape_id}")
                StatutEtape.objects.filter(idetape=etape).delete()
                print(f"DEBUG: Statuts supprim√©s")
                
                # V√©rifie et supprime les participations d'experts
                experts_count = Participationexpertetape.objects.filter(idetape=etape).count()
                print(f"DEBUG: {experts_count} participations d'experts trouv√©es")
                Participationexpertetape.objects.filter(idetape=etape).delete()
                print(f"DEBUG: Participations d'experts supprim√©es")
                
                # V√©rifier et supprimer les participations d'huissiers
                huissiers_count = Participationhuissieretape.objects.filter(idetape=etape).count()
                print(f"DEBUG: {huissiers_count} participations d'huissiers trouv√©es")
                Participationhuissieretape.objects.filter(idetape=etape).delete()
                print(f"DEBUG: Participations d'huissiers supprim√©es")
                
                # V√©rifier et supprimer les participations de t√©moins
                temoins_count = Participationtemoinetape.objects.filter(idetape=etape).count()
                print(f"DEBUG: {temoins_count} participations de t√©moins trouv√©es")
                Participationtemoinetape.objects.filter(idetape=etape).delete()
                print(f"DEBUG: Participations de t√©moins supprim√©es")
                
                # V√©rifier et supprimer les paiements d'honoraires
                paiements_count = Paiementhonoraires.objects.filter(idetape=etape).count()
                print(f"DEBUG: {paiements_count} paiements d'honoraires trouv√©s")
                Paiementhonoraires.objects.filter(idetape=etape).delete()
                print(f"DEBUG: Paiements d'honoraires supprim√©s")
                
                # V√©rifier et supprimer les PV d'ex√©cution
                pv_count = PVExecution.objects.filter(etape=etape).count()
                print(f"DEBUG: {pv_count} PV d'ex√©cution trouv√©s")
                PVExecution.objects.filter(etape=etape).delete()
                print(f"DEBUG: PV d'ex√©cution supprim√©s")
                
                # Mettre √† jour les affaires qui r√©f√©rencent cette √©tape comme √©tape actuelle
                affaires_count = Affairejudiciaire.objects.filter(etape_actuelle=etape).count()
                print(f"DEBUG: {affaires_count} affaires r√©f√©rencent cette √©tape")
                Affairejudiciaire.objects.filter(etape_actuelle=etape).update(etape_actuelle=None)
                print(f"DEBUG: R√©f√©rences d'affaires mises √† jour")
                
                # V√©rifier s'il reste des r√©f√©rences
                remaining_statuts = StatutEtape.objects.filter(idetape=etape).count()
                if remaining_statuts > 0:
                    print(f"DEBUG: ATTENTION - {remaining_statuts} statuts restent encore!")
                    # Forcer la suppression des statuts restants
                    StatutEtape.objects.filter(idetape=etape).delete()
                    print(f"DEBUG: Statuts restants supprim√©s de force")
                
                #  supprimer l'√©tape
                print(f"DEBUG: Suppression de l'√©tape {etape_id}")
                etape.delete()
                print(f"DEBUG: √âtape {etape_id} supprim√©e avec succ√®s")
                
                return Response({'message': '√âtape supprim√©e avec succ√®s'}, status=status.HTTP_204_NO_CONTENT)
                
        except Exception as e:
            print(f"DEBUG: Erreur lors de la suppression: {str(e)}")
            import traceback
            print(f"DEBUG: Traceback: {traceback.format_exc()}")
            return Response({'error': f'Erreur lors de la suppression: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)

class ExpertViewSet(viewsets.ModelViewSet):
    queryset = Expert.objects.all()
    serializer_class = ExpertSerializer

class FactureViewSet(viewsets.ModelViewSet):
    queryset = Facture.objects.all()
    serializer_class = FactureSerializer

class HuissierViewSet(viewsets.ModelViewSet):
    queryset = Huissier.objects.all()
    serializer_class = HuissierSerializer

class PaiementhonorairesViewSet(viewsets.ModelViewSet):
    queryset = Paiementhonoraires.objects.all()
    serializer_class = PaiementhonorairesSerializer

class ParticipationexpertetapeViewSet(viewsets.ModelViewSet):
    queryset = Participationexpertetape.objects.all()
    serializer_class = ParticipationexpertetapeSerializer

class ParticipationhuissieretapeViewSet(viewsets.ModelViewSet):
    queryset = Participationhuissieretape.objects.all()
    serializer_class = ParticipationhuissieretapeSerializer

class ParticipationtemoinetapeViewSet(viewsets.ModelViewSet):
    queryset = Participationtemoinetape.objects.all()
    serializer_class = ParticipationtemoinetapeSerializer

class TemoinViewSet(viewsets.ModelViewSet):
    queryset = Temoin.objects.all()
    serializer_class = TemoinSerializer


class TypeInterventionViewSet(viewsets.ModelViewSet):
    queryset = TypeIntervention.objects.all()
    serializer_class = TypeInterventionSerializer


class TribunalViewSet(viewsets.ModelViewSet):
    queryset = Tribunal.objects.all()
    # print("queryset :" , queryset)
    serializer_class = TribunalSerializer
    
    def get_queryset(self):
        queryset = Tribunal.objects.all()
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                models.Q(nomtribunal__icontains=search) |
                models.Q(villetribunal__icontains=search) |
                models.Q(adressetribunal__icontains=search)
            )
        return queryset

class TypeTribunalViewSet(viewsets.ModelViewSet):
    queryset = TypeTribunal.objects.all()
    serializer_class = TypeTribunalSerializer
    
    def get_queryset(self):
        queryset = TypeTribunal.objects.all()
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                models.Q(libelletypetribunal__icontains=search) |
                models.Q(code_type__icontains=search)
            )
        return queryset

# Ajout pour les tables de statut et de type
class StatutAffairetribunalViewSet(viewsets.ModelViewSet):
    queryset = StatutAffairetribunal.objects.all()
    serializer_class = StatutAffairetribunalSerializer

class StatutAudienceViewSet(viewsets.ModelViewSet):
    queryset = StatutAudience.objects.all()
    serializer_class = StatutAudienceSerializer

class TypeClientViewSet(viewsets.ModelViewSet):
    queryset = TypeClient.objects.all()
    serializer_class = TypeClientSerializer

class TypeAffaireViewSet(viewsets.ModelViewSet):
    queryset = TypeAffaire.objects.all()
    serializer_class = TypeAffaireSerializer
    
    def get_queryset(self):
        queryset = TypeAffaire.objects.all()
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                models.Q(libelletypeaffaire__icontains=search)
            )
        return queryset

class FonctionClientViewSet(viewsets.ModelViewSet):
    queryset = FonctionClient.objects.all()
    serializer_class = FonctionClientSerializer

class OpposantViewSet(viewsets.ModelViewSet):
    queryset = Opposant.objects.all()
    serializer_class = OpposantSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['nomopposant_fr', 'nomopposant_ar', 'email']


class CategorieAffaireViewSet(viewsets.ModelViewSet):
    queryset = CategorieAffaire.objects.all()
    serializer_class = CategorieAffaireSerializer
    
    def get_queryset(self):
        queryset = CategorieAffaire.objects.all()
        search = self.request.query_params.get('search', None)
        # applique un filtre de recherche souple (case-insensitive, partiel) sur deux champs (libelle et code) gr√¢ce aux Q objects.
        if search:
            queryset = queryset.filter(
                models.Q(libelle__icontains=search) |
                models.Q(code__icontains=search)
            )
        return queryset

class TypeAvertissementViewSet(viewsets.ModelViewSet):
    queryset = TypeAvertissement.objects.all()
    serializer_class = TypeAvertissementSerializer
    
    def get_queryset(self):
        queryset = TypeAvertissement.objects.all()
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                models.Q(libelle__icontains=search) |
                models.Q(libelle_ar__icontains=search)
            )
        return queryset

class TypeDemandeViewSet(viewsets.ModelViewSet):
    queryset = TypeDemande.objects.all()
    serializer_class = TypeDemandeSerializer
    
    def create(self, request, *args, **kwargs):
        try:
            serializer = self.get_serializer(data=request.data)
            if serializer.is_valid():
                instance = serializer.save()
                return Response(serializer.data, status=status.HTTP_201_CREATED)
            else:
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
    
    def get_queryset(self):
        queryset = TypeDemande.objects.all()
        search = self.request.query_params.get('search', None)
        if search:
            queryset = queryset.filter(
                models.Q(libelle__icontains=search) |
                models.Q(libelle_ar__icontains=search)
            )
        return queryset


class AffaireOpposantAvocatViewSet(viewsets.ModelViewSet):
    queryset = AffaireOpposantAvocat.objects.all()
    serializer_class = AffaireOpposantAvocatSerializer


# Vues d'API pour des fonctionnalit√©s m√©tier sp√©cifiques

# vue de  suggestion et filtrage selon le code
class ClassificationAffaireView(LanguageMixin, APIView):
    
    def get(self, request):
        lang = self.get_lang(request)
        code = request.query_params.get('code')
        if not code:
            return Response({"error": "Code requis"}, status=status.HTTP_400_BAD_REQUEST)
        try:
            # code exacte
            cat = CategorieAffaire.objects.select_related('sous_type__type_principale').get(code=code)
            # classification complete
            type_principale = cat.sous_type.type_principale
            sous_type = cat.sous_type

            classification = self.localize_struct({
                # keys you want in the response:
            }, {
                "type": (type_principale, "libelle"),
                "categorie": (sous_type, "libelle"),
                "detail": (cat, "libelle"),
                "type_principale": (type_principale, "libelle"),
            }, lang)
            
            # sugg de tribunaux
            logger.info("Classification calcul√©e: %s", classification)
            tribunaux_suggestion = TribunalSuggestionService.get_tribunaux_by_classification(classification) or {}
            tribs = []
            for t in tribunaux_suggestion.get("tribunaux", []):
                print( " ttt ",t)
                tribs.append({
                    "id": (t.get("id") if isinstance(t, dict) else getattr(t, "id", None)) or
                          (t.get("idtribunal") if isinstance(t, dict) else getattr(t, "idtribunal", None)),
                    "nom": self.lbl(t, "nom", lang),
                    "type": self.lbl(t, "type", lang),
                    "ville": self.lbl(t, "ville", lang),
                    "niveau": self.lbl(t, "niveau", lang),
                    "adresse": (t.get("adresse") if isinstance(t, dict) else getattr(t, "adresse", "")) or "",
                    "telephone": (t.get("telephone") if isinstance(t, dict) else getattr(t, "telephone", "")) or "",
                })
            #print("tribstribs    ",tribs)

            return Response({**classification, "tribunaux": tribs}, status=status.HTTP_200_OK)
        # si le  code exacte ne se trouve pas :
        except CategorieAffaire.DoesNotExist:
            qs = (CategorieAffaire.objects
                  .select_related('sous_type__type_principale')
                  .filter(code__startswith=code)[:10])
            suggestions = []
            for s in qs:
                suggestions.append({
                    "code": s.code,
                    "libelle": self.lbl(s, "libelle", lang),
                    "categorie": self.lbl(s.sous_type, "libelle", lang),
                    "type": self.lbl(s.sous_type.type_principale, "libelle", lang),
                })
            return Response({"suggestions": suggestions}, status=status.HTTP_200_OK)

# Vue pour  tribunaux selon le type daffaire
class TribunalSuggestionView(APIView):

    def get(self, request):
        type_affaire = request.query_params.get('type_affaire')
        ville = request.query_params.get('ville')
        mode_appel = request.query_params.get('mode_appel', 'false')
        
        if not type_affaire:
            return Response({"error": "Type d'affaire requis"}, status=status.HTTP_400_BAD_REQUEST)
        
        # Choisir la m√©thode selon le mode
        if mode_appel == 'true':
            # Pour l'appel : uniquement les cours d'appel
            tribunaux_data = TribunalSuggestionService.get_tribunaux_appel_by_classification({"type": type_affaire})
        else:
            # Pour la cr√©ation d'affaire : tous les tribunaux
            tribunaux_data = TribunalSuggestionService.get_tribunaux_by_classification({"type": type_affaire})
        
        if not tribunaux_data:
            return Response({"error": "Aucun tribunal trouv√© pour ce type d'affaire"}, status=status.HTTP_404_NOT_FOUND)
        
        tribunaux = tribunaux_data["tribunaux"]
        
        # Filtre par ville
        if ville:
            tribunaux = TribunalSuggestionService.filter_tribunaux_by_ville(tribunaux, ville)
        
        #  villes disponibles
        villes_disponibles = TribunalSuggestionService.get_villes_disponibles(tribunaux_data["tribunaux"])
        
        return Response({
            "type_affaire": tribunaux_data["classification"]["type"],
            "tribunaux": tribunaux,
            "villes_disponibles": villes_disponibles,
            "ville_selectionnee": ville
        })

# Vues d'API pour la gestion du processus judiciaire

# vues de etapes

@api_view(['GET'])
def affaire_etape_actuelle(request, affaire_id):
    """Obtenir l'√©tape actuelle d'une affaire"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)


        etape_actuelle = None
        
        #  Chercher l'√©tape actuelle assign√©e √† l'affaire
        if hasattr(affaire, 'etape_actuelle') and affaire.etape_actuelle:
            etape_actuelle = affaire.etape_actuelle
            print(f"‚úÖ √âtape actuelle trouv√©e dans l'affaire: {etape_actuelle.idetape}")
        
        # 2. Si pas d'√©tape assign√©e, chercher la premi√®re √©tape non termin√©e
        if not etape_actuelle:
            etape_actuelle = Etapejudiciaire.objects.filter(
                idaffaire=affaire,
                date_fin_effective__isnull=True
            ).order_by('ordre_etape').first()
            
            if etape_actuelle:
                print(f"‚úÖ √âtape actuelle trouv√©e (premi√®re non termin√©e): {etape_actuelle.idetape}")
        
        # 3. Si toujours pas d'√©tape, utiliser la logique par d√©faut
        if not etape_actuelle:
            etape_actuelle = get_etape_actuelle_par_phase(affaire)
            if etape_actuelle:
                print(f"‚úÖ √âtape actuelle trouv√©e par logique: {etape_actuelle.idetape}")

        if not etape_actuelle:
            return Response({
                'phase': getattr(affaire, 'phase_processus', 'INITIALE'),
                'etape_actuelle': None,
                'message': 'ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ±ÿßÿ≠ŸÑ ŸÖŸÉÿ™ŸÖŸÑÿ©' if getattr(affaire, 'phase_processus', 'INITIALE') == 'EXECUTION' else 'ŸÅŸä ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ÿØÿ° ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ©'
            })

        return Response({
            'phase': getattr(affaire, 'phase_processus', 'INITIALE'),
            'etape_actuelle': {
                'id': etape_actuelle.idetape,
                'libelle': etape_actuelle.idtypeetape.libelletypeetape if etape_actuelle.idtypeetape else None,
                'libelle_ar': etape_actuelle.idtypeetape.libelletypeetape if etape_actuelle.idtypeetape else None,
                'delai_legal': getattr(etape_actuelle, 'delai_legal', 0),
                'date_limite': None,  # n'existe pas dans votre base
                'ordre': getattr(etape_actuelle, 'ordre_etape', 0)
            },
            'progression': get_progression_phase(affaire)
        })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)


@api_view(['POST'])
def avancer_etape_affaire(request, affaire_id):
    """Avancer d'√©tape dans une affaire - Redirig√© vers completer_etape"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        # Rediriger vers completer_etape avec l'√©tape actuelle
        if affaire.etape_actuelle:
            return completer_etape(request, affaire_id, affaire.etape_actuelle.idetape)
        else:
            return Response({
                'message': 'Aucune √©tape actuelle √† terminer',
                'phase': affaire.phase_processus
            })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)


@api_view(['POST'])
def terminer_etape_affaire(request, affaire_id):
    """Terminer l'√©tape actuelle d'une affaire - Redirig√© vers completer_etape"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        # Rediriger vers completer_etape avec l'√©tape actuelle
        if affaire.etape_actuelle:
            return completer_etape(request, affaire_id, affaire.etape_actuelle.idetape)
        else:
            return Response({
                'message': 'Aucune √©tape actuelle √† terminer',
                'phase': affaire.phase_processus
            })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)


@api_view(['GET'])
def progression_affaire(request, affaire_id):
    """Obtenir la progression compl√®te d'une affaire"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        progression = get_progression_phase(affaire)

        return Response({
            'affaire_id': affaire_id,
            'phase': affaire.phase_processus,
            'progression': progression,
            'pourcentage': len([p for p in progression if p['terminee']]) / len(progression) * 100 if progression else 0
        })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)


#  GESTIONNAIRE D'√âTAPES

@api_view(['GET'])
def affaire_etapes(request, affaire_id):
    """R√©cup√©rer les √©tapes avec indication des √©tapes optionnelles"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        # Utiliser la logique existante avec les √©tapes optionnelles
        etapes = get_etapes_phase_initiale(affaire)
        
        # Ajouter l'information sur les √©tapes optionnelles
        for etape in etapes:
            etape['optionnel'] = not etape['obligatoire']
            etape['recommandee'] = not etape['obligatoire']  # Pour l'interface
        
        return Response(etapes)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
def affaire_etapes_reset(request, affaire_id):
    """R√©initialiser les √©tapes d'une affaire aux √©tapes par d√©faut"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        phase = request.data.get('phase', affaire.phase_processus)
        role_client = request.data.get('role_client', 'demandeur')
        
        # Supprimer les √©tapes existantes
        Etapejudiciaire.objects.filter(idaffaire=affaire).delete()
        
        # Cr√©er les nouvelles √©tapes selon le contexte
        if phase == 'INITIALE':
            etapes_defaut = get_etapes_phase_initiale(affaire)
        elif phase == 'PROCEDURE':
            etapes_defaut = get_etapes_phase_procedure(affaire)
        else:
            etapes_defaut = []
        
        # Cr√©er les √©tapes dans la base de donn√©es
        for i, etape_defaut in enumerate(etapes_defaut):
            type_etape = TypeEtape.objects.get_or_create(
                libelletypeetape=etape_defaut['nom']
            )[0]
            
            Etapejudiciaire.objects.create(
                idaffaire=affaire,
                idtypeetape=type_etape,
                delai_legal=etape_defaut['delai'],
                ordre_etape=i + 1,
                description_etape=etape_defaut.get('description', '')
            )
        
        return Response({
            'message': '√âtapes r√©initialis√©es avec succ√®s',
            'etapes_count': len(etapes_defaut)
        })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de la r√©initialisation: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
def tribunaux_appel(request):
    """Obtenir la liste des tribunaux d'appel"""
    try:
        tribunaux = Tribunal.objects.filter(
            idtypetribunal__libelletypetribunal__icontains='appel'
        ).select_related('idtypetribunal')
        
        tribunaux_data = []
        for tribunal in tribunaux:
            tribunaux_data.append({
                'id': tribunal.idtribunal,
                'nom': tribunal.nomtribunal_fr or tribunal.nomtribunal_ar or '',
                'ville': tribunal.ville,
                'type': tribunal.idtypetribunal.libelletypetribunal
            })
        
        return Response(tribunaux_data)
    except Exception as e:
        return Response({'error': f'Erreur lors du chargement des tribunaux: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)



# Vues d'API pour la gestion des affaires en appel

#  GESTIONNAIRE D'APPEL

@api_view(['POST'])
def creer_affaire_appel(request):
    """Cr√©er une nouvelle affaire d'appel li√©e √† une affaire existante"""
    try:
        # R√©cup√©rer l'ID de l'affaire parent depuis les donn√©es frontend
        affaire_parent_id = request.data.get('affaire_parent')
        idclient = request.data.get('idclient')
        role_client = request.data.get('role_client')
        phase_processus = request.data.get('phase_processus', 'APPEL')
        
        # R√©cup√©rer l'affaire parent
        affaire_parent = Affairejudiciaire.objects.get(idaffaire=affaire_parent_id)
        
        # Cr√©er la nouvelle affaire d'appel
        nouvelle_affaire = Affairejudiciaire.objects.create(
            affaire_parent=affaire_parent,
            phase_processus=phase_processus,
            numero_dossier=f"{affaire_parent.numero_dossier}-A",
            code_dossier=affaire_parent.code_dossier,
            annee_dossier=affaire_parent.annee_dossier,
            idclient=idclient,
            idfonctionclient=affaire_parent.idfonctionclient,
            idtypeaffaire=affaire_parent.idtypeaffaire,
            dateouverture=date.today(),
            datecloture=None
        )
        
        return Response({
            'message': 'Affaire d\'appel cr√©√©e avec succ√®s',
            'idaffaire': nouvelle_affaire.idaffaire,
            'numero_dossier': nouvelle_affaire.numero_dossier
        }, status=status.HTTP_201_CREATED)
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire parent non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de la cr√©ation: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)


# Vues d'API pour la gestion de l'ex√©cution des jugements

#  GESTIONNAIRE D'EX√âCUTION

@api_view(['POST'])
def assigner_huissier_execution(request, affaire_id):
    """Assigner un huissier √† l'ex√©cution d'une affaire"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        huissier_id = request.data.get('huissier_id')
        
        huissier = Huissier.objects.get(idhuissier=huissier_id)
        
        # Cr√©er ou mettre √† jour l'assignation
        Participationhuissieretape.objects.update_or_create(
            idaffaire=affaire,
            idhuissier=huissier,
            defaults={'date_assignment': date.today()}
        )
        
        return Response({
            'message': 'Huissier assign√© avec succ√®s',
            'huissier': {
                'id': huissier.idhuissier,
                'nom': huissier.nomhuissier,
                'ville': huissier.ville
            }
        })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Huissier.DoesNotExist:
        return Response({'error': 'Huissier non trouv√©'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de l\'assignation: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
def enregistrer_contact_execution(request, affaire_id):
    """Enregistrer le r√©sultat du contact avec l'huissier"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        resultat = request.data.get('resultat')
        
        # Cr√©er un enregistrement de contact
        ContactExecution.objects.create(
            idaffaire=affaire,
            resultat_contact=resultat,
            date_contact=date.today()
        )
        
        return Response({
            'message': 'R√©sultat du contact enregistr√©',
            'resultat': resultat
        })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de l\'enregistrement: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
def enregistrer_pv_execution(request, affaire_id):
    # Enregistrer PV d'ex√©cution
    try:
        print(f"=== DEBUG PV EXECUTION ===")
        print(f"Affaire ID: {affaire_id}")
        print(f"Donn√©es re√ßues: {request.data}")
        
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        etape_id = request.data.get('etape_id')
        type_pv = request.data.get('type_pv')
        
        print(f"√âtape ID re√ßu: {etape_id}")
        print(f"Type PV: {type_pv}")
        
        # R√©cup√©rer l'√©tape ou la cr√©er si elle n'existe pas
        try:
            etape = Etapejudiciaire.objects.get(idetape=etape_id, idaffaire=affaire)
        except Etapejudiciaire.DoesNotExist:
            # Cr√©er une nouvelle √©tape pour l'ex√©cution
            etape = Etapejudiciaire.objects.create(
                idetape=etape_id,
                idaffaire=affaire,
                datedebut=date.today(),
                delai_legal=30,
                ordre_etape=1,
                etape_obligatoire=True
            )
        

        
        # Cr√©er le PV d'ex√©cution
        pv_data = {
            'etape': etape,
            'type_pv': type_pv,
            'date_pv': date.today(),
            'commentaires': request.data.get('commentaires', '')
        }
        
        # Ajouter les champs sp√©cifiques selon le type
        if type_pv == 'paiement':
            pv_data.update({
                'montant_paye': request.data.get('montant_paye'),
                'mode_paiement': request.data.get('mode_paiement'),
                'numero_recu': request.data.get('numero_recu')
            })
        elif type_pv == 'pv_informatif':
            pv_data.update({
                'motif_absence': request.data.get('motif_absence')
            })
            

        
        # Cr√©er le PV d'ex√©cution dans la table pv_execution
        pv_data = {
            'etape': etape,
            'type_pv': type_pv,
            'date_pv': date.today(),
            'commentaires': request.data.get('commentaires', '')
        }
        
        # Ajouter les champs sp√©cifiques selon le type
        if type_pv == 'paiement':
            pv_data.update({
                'montant_paye': request.data.get('montant_paye'),
                'mode_paiement': request.data.get('mode_paiement'),
                'numero_recu': request.data.get('numero_recu')
            })
        elif type_pv == 'pv_informatif':
            pv_data.update({
                'motif_absence': request.data.get('motif_absence')
            })
            
            # Cr√©er une demande de coercition si demand√©e
            if request.data.get('demande_coercition'):
                demande = DemandesFichier.objects.create(
                    type_demande='COERCITION',
                    description='Demande de coercition suite √† PV informatif',
                    statut='EN_ATTENTE',
                    priorite='URGENTE'
                )
                pv_data['demande_coercition'] = demande
        
        print(f"Donn√©es PV √† cr√©er: {pv_data}")
        
        pv = PVExecution.objects.create(**pv_data)
        
        print(f"PV cr√©√© avec succ√®s - ID: {pv.id}")
        
        return Response({
            'message': 'PV d\'ex√©cution enregistr√© avec succ√®s',
            'pv_id': pv.id,
            'type': type_pv
        })
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Etapejudiciaire.DoesNotExist:
        return Response({'error': '√âtape non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de l\'enregistrement du PV: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)





# Endpoint pour r√©cup√©rer les choix p√©naux
@api_view(['GET'])
def get_choix_penaux(request):
    """R√©cup√©rer tous les choix disponibles pour les affaires p√©nales"""
    return Response({
        'autorites_emettrice': AUTORITES_EMETTRICES,
        'types_action_penale': TYPES_ACTION_PENALE,
        'types_jugement': TYPES_JUGEMENT,
        'statuts_execution': STATUTS_EXECUTION,
        'types_execution': TYPES_EXECUTION
    })

@api_view(['POST'])
def update_all_etapes_types(request):
    """Met √† jour toutes les √©tapes existantes qui n'ont pas de type d'√©tape"""
    try:
        update_existing_etapes_without_type()
        return Response({'message': 'Mise √† jour des types d\'√©tapes termin√©e'}, status=200)
    except Exception as e:
        return Response({'error': f'Erreur lors de la mise √† jour: {str(e)}'}, status=500)


# Vues d'API pour la gestion manuelle des √©tapes judiciaires

#  GESTION DIRECTE DES √âTAPES

@api_view(['POST'])
def completer_etape(request, affaire_id, etape_id):
    """Compl√©ter une √©tape avec observations et date effective"""
    try:
        print(f"=== DEBUG COMPLETER ETAPE ===")
        print(f"Affaire ID: {affaire_id}")
        print(f"√âtape ID: {etape_id}")
        print(f"Donn√©es re√ßues: {request.data}")
        
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        # R√©cup√©rer les donn√©es de type d'avertissement et de demande
        type_avertissement_id = request.data.get('type_avertissement_id')
        type_demande_id = request.data.get('type_demande_id')
        delai_legal_personnalise = request.data.get('delai_legal')
        
        print(f"Type avertissement ID: {type_avertissement_id}")
        print(f"Type demande ID: {type_demande_id}")
        print(f"D√©lai l√©gal personnalis√©: {delai_legal_personnalise}")
        
        #  d√©lai saisi par l'utilisateur
        delai_final = None
        if delai_legal_personnalise:
            try:
                delai_final = int(delai_legal_personnalise)
                # Limiter le d√©lai √† une valeur raisonnable (max 365 jours)
                if delai_final > 365:
                    delai_final = 365
                    print(f"D√©lai limit√© √† 365 jours (valeur originale: {delai_legal_personnalise})")
                elif delai_final < 0:
                    delai_final = 0
                    print(f"D√©lai corrig√© √† 0 (valeur originale: {delai_legal_personnalise})")
            except (ValueError, TypeError):
                delai_final = None
                print(f"Valeur de d√©lai invalide: {delai_legal_personnalise}")
        
        print(f"D√©lai final: {delai_final}")
        
        # Recherche intelligente d'√©tapes existantes
        etape = None
        
        # 1. Essayer de trouver l'√©tape par ID exact
        try:
            etape = Etapejudiciaire.objects.get(idetape=etape_id, idaffaire=affaire)
            print(f"‚úÖ √âtape existante trouv√©e par ID exact: {etape.idetape}")
        except Etapejudiciaire.DoesNotExist:
            print(f"‚ÑπÔ∏è √âtape {etape_id} non trouv√©e par ID exact, recherche par pattern...")
            
            # 2. Essayer de trouver par pattern (etape_X_affaire_Y_hash)
            if '_' in str(etape_id):
                try:
                    etape = Etapejudiciaire.objects.filter(
                        idetape__startswith=f"{etape_id}_{affaire_id}_",
                        idaffaire=affaire
                    ).first()
                    if etape:
                        print(f"‚úÖ √âtape trouv√©e par pattern: {etape.idetape}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors de la recherche par pattern: {str(e)}")
            
            # 3. Si toujours pas trouv√©e, essayer par ordre d'√©tape
            if not etape:
                try:
                    ordre = int(etape_id.split('_')[1]) if '_' in str(etape_id) else int(etape_id)
                    etape = Etapejudiciaire.objects.filter(
                        idaffaire=affaire,
                        ordre_etape=ordre
                    ).first()
                    if etape:
                        print(f"‚úÖ √âtape trouv√©e par ordre: {etape.idetape} (ordre: {ordre})")
                except (ValueError, IndexError):
                    print(f"‚ÑπÔ∏è Impossible de d√©terminer l'ordre pour {etape_id}")
        
        # Si l'√©tape existe, la mettre √† jour
        if etape:
            print(f"üîÑ Mise √† jour de l'√©tape existante: {etape.idetape}")
            
            # Mettre √† jour les donn√©es de l'√©tape existante
            if delai_final is not None:
                etape.delai_legal = delai_final
                print(f"‚úÖ D√©lai l√©gal mis √† jour: {etape.delai_legal}")
            
            if type_avertissement_id:
                try:
                    type_avertissement = TypeAvertissement.objects.get(idtypeavertissement=type_avertissement_id)
                    etape.idtypeavertissement = type_avertissement
                    print(f"‚úÖ Type avertissement mis √† jour: {type_avertissement.libelle_fr or type_avertissement.libelle_ar or ''}")
                except TypeAvertissement.DoesNotExist:
                    print(f"‚ö†Ô∏è Type avertissement {type_avertissement_id} non trouv√©")
            
            if type_demande_id:
                try:
                    type_demande = TypeDemande.objects.get(idtypedemande=type_demande_id)
                    etape.idtypedemande = type_demande
                    print(f"‚úÖ Type demande mis √† jour: {type_demande.libelle_fr or type_demande.libelle_ar or ''}")
                except TypeDemande.DoesNotExist:
                    print(f"‚ö†Ô∏è Type demande {type_demande_id} non trouv√©")
            
            # NOUVEAU : S'assurer que l'√©tape a un type valide
            if not etape.idtypeetape:
                print(f"‚ö†Ô∏è √âtape sans type, assignation d'un type par d√©faut...")
                type_etape_defaut = get_type_etape_by_etape_id(etape_id)
                if type_etape_defaut:
                    etape.idtypeetape = type_etape_defaut
                    print(f"‚úÖ Type d'√©tape assign√©: {type_etape_defaut.libelletypeetape}")
            
            etape.save()
            print(f"‚úÖ √âtape existante mise √† jour avec succ√®s")
            
        else:
            # Cr√©er une nouvelle √©tape
            print(f"üÜï Cr√©ation d'une nouvelle √©tape pour {etape_id}")
            
            # G√©n√©rer un ID unique pour la nouvelle √©tape
            import uuid
            etape_unique_id = f"{etape_id}_{affaire_id}_{uuid.uuid4().hex[:8]}"
            print(f"ID unique g√©n√©r√©: {etape_unique_id}")
            
            # NOUVEAU : Utiliser la fonction de mapping au lieu de cr√©er des types
            # D√©terminer si c'est une affaire p√©nale et le r√¥le du client
            is_affaire_penale = False
            try:
                if affaire.idcategorieaffaire and hasattr(affaire.idcategorieaffaire, 'libelle_fr'):
                    is_affaire_penale = (affaire.idcategorieaffaire.libelle_fr or affaire.idcategorieaffaire.libelle_ar or '').lower() in ['penal', 'p√©nal', 'penale', 'p√©nale']
            except:
                pass
            
            # D√©terminer le r√¥le du client selon sa fonction
            from .services import get_role_client_from_fonction
            role_client = get_role_client_from_fonction(affaire)
            
            print(f"üîç DEBUG: is_affaire_penale = {is_affaire_penale}")
            print(f"üîç DEBUG: role_client = {role_client}")
            print(f"üîç DEBUG: etape_id = {etape_id}")
            
            # D√©terminer la phase selon les donn√©es re√ßues
            phase = "INITIALE"  # Par d√©faut
            
            print(f"üîç DEBUG: Appel get_type_etape_by_etape_id avec phase={phase}, role={role_client}")
            
            # NOUVELLE LOGIQUE: Utiliser la logique unifi√©e pour d√©terminer le type d'√©tape
            from .services import get_etapes_phase_initiale, get_etapes_phase_procedure
            
            type_etape = None
            
            # D√©terminer la phase de l'affaire
            affaire_phase = getattr(affaire, 'phase_processus', 'INITIALE')
            print(f"üîç DEBUG: Phase de l'affaire: {affaire_phase}")
            print(f"üîç DEBUG: D√©but de la logique de mapping pour etape_id: {etape_id}")
            
            if affaire_phase == 'INITIALE':
                print(f"üîç DEBUG: Phase INITIALE d√©tect√©e")
                etapes_phase = get_etapes_phase_initiale(affaire)
                print(f"üîç DEBUG: √âtapes phase initiale: {etapes_phase}")
                print(f"üîç DEBUG: Nombre d'√©tapes: {len(etapes_phase)}")
                
                # Chercher l'√©tape correspondante
                if etape_id.startswith('etape_'):
                    try:
                        index = int(etape_id.split('_')[1])
                        print(f"üîç DEBUG: Index extrait: {index}")
                        if index < len(etapes_phase):
                            libelle_etape = etapes_phase[index]['libelle_ar']
                            print(f"üîç DEBUG: Libell√© √©tape trouv√©: {libelle_etape}")
                            
                            # Chercher le type d'√©tape correspondant
                            type_etape = TypeEtape.objects.filter(libelletypeetape=libelle_etape).first()
                            if type_etape:
                                print(f"‚úÖ Type d'√©tape trouv√©: {type_etape.idtypeetape} - {type_etape.libelletypeetape}")
                            else:
                                print(f"‚ùå Type d'√©tape non trouv√© pour: {libelle_etape}")
                        else:
                            print(f"‚ùå Index {index} hors limites (max: {len(etapes_phase)-1})")
                    except (ValueError, IndexError) as e:
                        print(f"‚ùå Impossible de d√©terminer l'index pour: {etape_id} - Erreur: {str(e)}")
                else:
                    print(f"‚ùå etape_id ne commence pas par 'etape_': {etape_id}")
            
            elif affaire_phase == 'PROCEDURE':
                etapes_phase = get_etapes_phase_procedure(affaire)
                print(f"üîç DEBUG: √âtapes phase proc√©dure: {etapes_phase}")
                
                # Chercher l'√©tape correspondante
                if etape_id.startswith('etape_'):
                    try:
                        index = int(etape_id.split('_')[1])
                        if index < len(etapes_phase):
                            libelle_etape = etapes_phase[index][0]  # Format tuple (libelle, delai)
                            print(f"üîç DEBUG: Libell√© √©tape trouv√©: {libelle_etape}")
                            
                            # Chercher le type d'√©tape correspondant
                            type_etape = TypeEtape.objects.filter(libelletypeetape=libelle_etape).first()
                            if type_etape:
                                print(f"‚úÖ Type d'√©tape trouv√©: {type_etape.idtypeetape} - {type_etape.libelletypeetape}")
                            else:
                                print(f"‚ùå Type d'√©tape non trouv√© pour: {libelle_etape}")
                    except (ValueError, IndexError):
                        print(f"‚ùå Impossible de d√©terminer l'index pour: {etape_id}")
            
            # Fallback vers l'ancienne m√©thode si pas trouv√©
            if not type_etape:
                print(f"üîç DEBUG: Fallback vers get_type_etape_by_etape_id")
                type_etape = get_type_etape_by_etape_id(etape_id, phase, role_client)
            
            print(f"üîç DEBUG: type_etape = {type_etape}")
            print(f"Type d'√©tape assign√©: {type_etape.libelletypeetape if type_etape else 'Aucun'}")
            
            # V√©rifier que le type d'√©tape existe bien en base
            if type_etape:
                try:
                    type_etape_verifie = TypeEtape.objects.get(idtypeetape=type_etape.idtypeetape)
                    print(f"‚úÖ Type d'√©tape v√©rifi√© en base: {type_etape_verifie.idtypeetape} - {type_etape_verifie.libelletypeetape}")
                except TypeEtape.DoesNotExist:
                    print(f"‚ùå ERREUR: Type d'√©tape {type_etape.idtypeetape} n'existe pas en base!")
                    # Essayer de r√©cup√©rer un type par d√©faut
                    type_etape_defaut = TypeEtape.objects.first()
                    if type_etape_defaut:
                        type_etape = type_etape_defaut
                        print(f"‚úÖ Type d'√©tape par d√©faut assign√©: {type_etape.libelletypeetape}")
                    else:
                        print(f"‚ùå Aucun type d'√©tape disponible en base!")
                        return Response({'error': 'Aucun type d\'√©tape disponible en base de donn√©es'}, status=400)
            else:
                print(f"‚ùå ERREUR: Aucun type d'√©tape trouv√© pour {etape_id}")
                # Essayer de r√©cup√©rer un type par d√©faut
                type_etape_defaut = TypeEtape.objects.first()
                if type_etape_defaut:
                    type_etape = type_etape_defaut
                    print(f"‚úÖ Type d'√©tape par d√©faut assign√©: {type_etape.libelletypeetape}")
                else:
                    print(f"‚ùå Aucun type d'√©tape disponible en base!")
                    return Response({'error': 'Aucun type d\'√©tape disponible en base de donn√©es'}, status=400)
            
            # Pr√©parer les donn√©es pour la cr√©ation d'√©tape
            etape_data = {
                'idetape': etape_unique_id,
                'idaffaire': affaire,
                'idtypeetape': type_etape,
                'datedebut': date.today(),
                'ordre_etape': int(etape_id.split('_')[1]) if '_' in etape_id else 0,
                'etape_obligatoire': True
            }
            
            print(f"Donn√©es de base: {etape_data}")
            
            # Ajouter le d√©lai l√©gal seulement s'il est fourni
            if delai_final is not None:
                etape_data['delai_legal'] = delai_final
                print(f"D√©lai l√©gal ajout√©: {delai_final}")
            
            # Ajouter les types personnalis√©s si fournis
            if type_avertissement_id:
                try:
                    type_avertissement = TypeAvertissement.objects.get(idtypeavertissement=type_avertissement_id)
                    etape_data['idtypeavertissement'] = type_avertissement
                    print(f"Type avertissement ajout√©: {type_avertissement.libelle_fr or type_avertissement.libelle_ar or ''}")
                except TypeAvertissement.DoesNotExist:
                    print(f"Type avertissement {type_avertissement_id} non trouv√©")
                    pass
            if type_demande_id:
                try:
                    type_demande = TypeDemande.objects.get(idtypedemande=type_demande_id)
                    etape_data['idtypedemande'] = type_demande
                    print(f"Type demande ajout√©: {type_demande.libelle_fr or type_demande.libelle_ar or ''}")
                except TypeDemande.DoesNotExist:
                    print(f"Type demande {type_demande_id} non trouv√©")
                    pass
            
            print(f"Donn√©es finales: {etape_data}")
            
            # NOUVEAU : V√©rifier que l'√©tape a un type valide avant de la cr√©er
            if not etape_data.get('idtypeetape'):
                print(f"‚ö†Ô∏è ATTENTION: L'√©tape n'a pas de type d'√©tape assign√©!")
                # Essayer de r√©cup√©rer un type par d√©faut
                try:
                    type_etape_defaut = TypeEtape.objects.first()
                    if type_etape_defaut:
                        etape_data['idtypeetape'] = type_etape_defaut
                        print(f"‚úÖ Type d'√©tape par d√©faut assign√©: {type_etape_defaut.libelletypeetape}")
                    else:
                        print(f"‚ùå Aucun type d'√©tape disponible en base!")
                        return Response({'error': 'Aucun type d\'√©tape disponible en base de donn√©es'}, status=400)
                except Exception as e:
                    print(f"‚ùå Erreur lors de la r√©cup√©ration du type d'√©tape par d√©faut: {str(e)}")
                    return Response({'error': f'Erreur lors de la r√©cup√©ration du type d\'√©tape: {str(e)}'}, status=400)
            
            # V√©rification suppl√©mentaire avant cr√©ation
            if not etape_data.get('idtypeetape'):
                print(f"‚ùå ERREUR CRITIQUE: Impossible d'assigner un type d'√©tape!")
                return Response({'error': 'Impossible d\'assigner un type d\'√©tape √† cette √©tape'}, status=400)
            
            print(f"üîç DEBUG: Tentative de cr√©ation de l'√©tape avec les donn√©es: {etape_data}")
            try:
                etape = Etapejudiciaire.objects.create(**etape_data)
                print(f"‚úÖ √âtape cr√©√©e avec succ√®s: {etape.idetape}")
            except Exception as e:
                print(f"‚ùå ERREUR lors de la cr√©ation de l'√©tape: {str(e)}")
                print(f"‚ùå Traceback complet:")
                import traceback
                print(traceback.format_exc())
                return Response({'error': f'Erreur lors de la cr√©ation de l\'√©tape: {str(e)}'}, status=400)
            print(f"‚úÖ Type d'√©tape: {etape.idtypeetape.libelletypeetape if etape.idtypeetape else 'Aucun'}")
            print(f"‚úÖ D√©lai l√©gal: {etape.delai_legal}")
            print(f"‚úÖ Type avertissement: {etape.idtypeavertissement}")
        
        observations = request.data.get('observations', '')
        # Saisie libre du nom de l'avocat du demandeur; on le stocke au niveau de l'affaire
        avocat_demandeur_nom = request.data.get('avocat_demandeur_nom')
        if avocat_demandeur_nom:
            affaire.avocat_demandeur_nom = avocat_demandeur_nom
            affaire.save(update_fields=['avocat_demandeur_nom'])
        date_effective = request.data.get('date_effective')
        
        # NOUVELLE LOGIQUE : Gestion des √©tapes p√©nales opposant - D√âPLAC√â ICI POUR S'EX√âCUTER TOUJOURS
        print(f"=== DEBUG DONN√âES P√âNALES ===")
        print(f"autorite_emettrice re√ßu: {request.data.get('autorite_emettrice')}")
        print(f"type_action_penale re√ßu: {request.data.get('type_action_penale')}")
        print(f"Toutes les donn√©es re√ßues: {request.data}")
        
        # NOUVELLE LOGIQUE : D√©tection des √©tapes p√©nales (INITIALE, PROCEDURE, EXECUTION)
        autorite = request.data.get('autorite_emettrice')
        type_action = request.data.get('type_action_penale')
        execution_faite = request.data.get('execution_faite')
        date_execution = request.data.get('date_execution')
        type_execution = request.data.get('type_execution')
        observations_defense = request.data.get('observations_defense')
        jugement = request.data.get('jugement')
        
        # V√©rifier si c'est une √©tape p√©nale (INITIALE, PROCEDURE, ou EXECUTION)
        is_etape_penale = (
            (autorite and type_action) or  # Phase INITIALE
            (observations_defense or jugement) or  # Phase PROCEDURE
            (execution_faite or date_execution or type_execution)  # Phase EXECUTION
        )
        
        print(f"üîç DEBUG: autorite = '{autorite}'")
        print(f"üîç DEBUG: type_action = '{type_action}'")
        print(f"üîç DEBUG: execution_faite = '{execution_faite}'")
        print(f"üîç DEBUG: date_execution = '{date_execution}'")
        print(f"üîç DEBUG: type_execution = '{type_execution}'")
        print(f"üîç DEBUG: observations_defense = '{observations_defense}'")
        print(f"üîç DEBUG: jugement = '{jugement}'")
        print(f"üîç DEBUG: is_etape_penale = {is_etape_penale}")
        
        if is_etape_penale:
            print(f"‚úÖ Traitement des donn√©es p√©nales")
            # Validation des choix p√©naux (seulement si phase INITIALE)
            if autorite and type_action:
                autorites_valides = [choice[0] for choice in AUTORITES_EMETTRICES]
                types_valides = [choice[0] for choice in TYPES_ACTION_PENALE]
                
                print(f"‚úÖ Autorit√© re√ßue: '{autorite}'")
                print(f"‚úÖ Type action re√ßu: '{type_action}'")
                print(f"‚úÖ Autorit√©s valides: {autorites_valides}")
                print(f"‚úÖ Types valides: {types_valides}")
                
                if autorite not in autorites_valides:
                    print(f"‚ùå Autorit√© invalide: '{autorite}'")
                    return Response({'error': f'Autorit√© √©mettrice invalide: {autorite}'}, status=400)
                
                if type_action not in types_valides:
                    print(f"‚ùå Type action invalide: '{type_action}'")
                    return Response({'error': f'Type d\'action p√©nale invalide: {type_action}'}, status=400)
            
            # Validation du jugement si fourni
            jugement = request.data.get('jugement')
            if jugement:
                jugements_valides = [choice[0] for choice in TYPES_JUGEMENT]
                if jugement not in jugements_valides:
                    print(f"‚ùå Jugement invalide: '{jugement}'")
                    return Response({'error': f'Jugement invalide: {jugement}'}, status=400)
            
            # Validation du type d'ex√©cution si fourni
            type_execution = request.data.get('type_execution')
            if type_execution:
                types_execution_valides = [choice[0] for choice in TYPES_EXECUTION]
                if type_execution not in types_execution_valides:
                    print(f"‚ùå Type d'ex√©cution invalide: '{type_execution}'")
                    return Response({'error': f'Type d\'ex√©cution invalide: {type_execution}'}, status=400)
            
            print(f"‚úÖ Validation r√©ussie, traitement des donn√©es...")
            
            # R√©cup√©rer les fichiers PDF si fournis
            convocation_pdf = request.FILES.get('convocation_pdf') if request.FILES else None
            documents_defense = request.FILES.get('documents_defense') if request.FILES else None
            document_execution = request.FILES.get('document_execution') if request.FILES else None
            print(f"‚úÖ Fichier convocation PDF re√ßu: {convocation_pdf}")
            print(f"‚úÖ Fichier documents d√©fense PDF re√ßu: {documents_defense}")
            print(f"‚úÖ Fichier document ex√©cution PDF re√ßu: {document_execution}")
            
            # DEBUG : V√©rifier si on est dans une √©tape d'ex√©cution
            execution_faite = request.data.get('execution_faite')
            date_execution = request.data.get('date_execution')
            print(f"üîç DEBUG: execution_faite = {execution_faite}")
            print(f"üîç DEBUG: date_execution = {date_execution}")
            print(f"üîç DEBUG: documents_defense pr√©sent = {documents_defense is not None}")
            print(f"üîç DEBUG: document_execution pr√©sent = {document_execution is not None}")
            
            # Encoder les donn√©es p√©nale dans les champs existants
            donnees_penales = {
                "autorite_emettrice": autorite,
                "type_action_penale": type_action,
                "date_convocation_arrestation": request.data.get('date_convocation_arrestation'),
                "audition_police_faite": request.data.get('audition_police_faite', False),
                "observations_penales": request.data.get('observations_penales', ''),
                # NOUVEAU : Donn√©es pour la phase PROCEDURE
                "observations_defense": request.data.get('observations_defense', ''),
                "jugement": request.data.get('jugement', ''),
                # NOUVEAU : Donn√©es pour la phase EXECUTION
                "execution_faite": request.data.get('execution_faite', False),
                "date_execution": request.data.get('date_execution', ''),
                "details_execution": request.data.get('details_execution', ''),
                "observations_execution": request.data.get('observations_execution', ''),
                "motif_non_execution": request.data.get('motif_non_execution', ''),
                "type_execution": request.data.get('type_execution', ''),
                "date_creation": str(date.today())
            }
            print(f"‚úÖ Donn√©es p√©nales pr√©par√©es: {donnees_penales}")
            
            try:
                import json
                # Stocker dans description_etape (champ existant)
                etape.description_etape = json.dumps(donnees_penales, ensure_ascii=False)
                print(f"‚úÖ Donn√©es p√©nales stock√©es dans description_etape: {etape.description_etape}")
                
                # Stocker les m√©tadonn√©es dans documents_requis (champ existant)
                metadonnees = {
                    "type_intervention": "PENALE_OPPOSANT",
                    "autorite": autorite,
                    "type_action": type_action,
                    "audition_statut": "FAITE" if request.data.get('audition_police_faite') else "NON_FAITE"
                }
                etape.documents_requis = json.dumps(metadonnees, ensure_ascii=False)
                print(f"‚úÖ M√©tadonn√©es stock√©es dans documents_requis: {etape.documents_requis}")
                
                # Mettre √† jour la date de d√©but si fournie
                if request.data.get('date_convocation_arrestation'):
                    etape.datedebut = request.data.get('date_convocation_arrestation')
                    print(f"‚úÖ Date de d√©but mise √† jour: {etape.datedebut}")
                
                # Stocker les observations dans le champ observations_etape
                observations_penales = request.data.get('observations_penales', '')
                observations_defense = request.data.get('observations_defense', '')
                observations_execution = request.data.get('observations_execution', '')
                motif_non_execution = request.data.get('motif_non_execution', '')
                
                # Priorit√© aux observations d'ex√©cution si elles existent
                if observations_execution:
                    etape.observations_etape = observations_execution
                    print(f"‚úÖ Observations ex√©cution sauvegard√©es dans observations_etape: {observations_execution}")
                elif motif_non_execution:
                    etape.observations_etape = motif_non_execution
                    print(f"‚úÖ Motif non-ex√©cution sauvegard√© dans observations_etape: {motif_non_execution}")
                elif observations_defense:
                    etape.observations_etape = observations_defense
                    print(f"‚úÖ Observations d√©fense sauvegard√©es dans observations_etape: {observations_defense}")
                elif observations_penales:
                    etape.observations_etape = observations_penales
                    print(f"‚úÖ Observations p√©nale sauvegard√©es dans observations_etape: {observations_penales}")
                
                # G√©rer l'upload du fichier PDF de convocation/arrestation
                if convocation_pdf:
                    try:
                        import uuid
                        file_extension = convocation_pdf.name.split('.')[-1]
                        filename = f"convocation_penale_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                        
                        from django.conf import settings
                        import os
                        
                        file_path = os.path.join(settings.MEDIA_ROOT, 'convocations_penales', filename)
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        
                        with open(file_path, 'wb+') as destination:
                            for chunk in convocation_pdf.chunks():
                                destination.write(chunk)
                        
                        fichier = Fichier.objects.create(
                            nom_fichier=filename,
                            chemin_fichier=f'convocations_penales/{filename}',
                            type_fichier='convocation_penale',
                            idaffaire=affaire,
                            date_upload=date.today()
                        )
                        
                        # Ajouter le nom du fichier aux donn√©es JSON
                        donnees_penales["fichier_pdf"] = filename
                        print(f"‚úÖ Fichier convocation PDF sauvegard√©: {filename}")
                        
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la sauvegarde du fichier convocation PDF: {str(e)}")
                
                # G√©rer l'upload du fichier PDF de documents de d√©fense
                if documents_defense:
                    print(f"üîç DEBUG: documents_defense d√©tect√©: {documents_defense.name}")
                    try:
                        import uuid
                        file_extension = documents_defense.name.split('.')[-1]
                        filename = f"documents_defense_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                        
                        from django.conf import settings
                        import os
                        
                        print(f"üîç DEBUG: MEDIA_ROOT = {settings.MEDIA_ROOT}")
                        file_path = os.path.join(settings.MEDIA_ROOT, 'documents_defense', filename)
                        print(f"üîç DEBUG: Chemin complet = {file_path}")
                        print(f"üîç DEBUG: Dossier parent = {os.path.dirname(file_path)}")
                        
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        print(f"‚úÖ DEBUG: Dossier cr√©√© avec succ√®s")
                        
                        with open(file_path, 'wb+') as destination:
                            for chunk in documents_defense.chunks():
                                destination.write(chunk)
                        
                        fichier = Fichier.objects.create(
                            nom_fichier=filename,
                            chemin_fichier=f'documents_defense/{filename}',
                            type_fichier='documents_defense',
                            idaffaire=affaire,
                            date_upload=date.today()
                        )
                        
                        # Ajouter le nom du fichier aux donn√©es JSON
                        donnees_penales["fichier_documents_defense"] = filename
                        print(f"‚úÖ Fichier documents d√©fense PDF sauvegard√©: {filename}")
                        
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la sauvegarde du fichier documents d√©fense PDF: {str(e)}")
                
                # G√©rer l'upload du fichier PDF d'ex√©cution
                if document_execution:
                    try:
                        import uuid
                        file_extension = document_execution.name.split('.')[-1]
                        filename = f"document_execution_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                        
                        from django.conf import settings
                        import os
                        
                        file_path = os.path.join(settings.MEDIA_ROOT, 'execution_penale', filename)
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        
                        with open(file_path, 'wb+') as destination:
                            for chunk in document_execution.chunks():
                                destination.write(chunk)
                        
                        fichier = Fichier.objects.create(
                            nom_fichier=filename,
                            chemin_fichier=f'execution_penale/{filename}',
                            type_fichier='document_execution',
                            idaffaire=affaire,
                            date_upload=date.today()
                        )
                        
                        # Ajouter le nom du fichier aux donn√©es JSON
                        donnees_penales["fichier_document_execution"] = filename
                        print(f"‚úÖ Fichier document ex√©cution PDF sauvegard√©: {filename}")
                        
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la sauvegarde du fichier document ex√©cution PDF: {str(e)}")
                
                # Mettre √† jour le JSON final avec toutes les donn√©es
                etape.description_etape = json.dumps(donnees_penales, ensure_ascii=False)
                
                # Mettre √† jour les m√©tadonn√©es
                metadonnees = {
                    "type_intervention": "PENALE_OPPOSANT_EXECUTION" if request.data.get('execution_faite') or request.data.get('date_execution') else ("PENALE_OPPOSANT_PROCEDURE" if request.data.get('observations_defense') or request.data.get('jugement') else "PENALE_OPPOSANT_INITIALE"),
                    "autorite": autorite,
                    "type_action": type_action,
                    "audition_statut": "FAITE" if request.data.get('audition_police_faite') else "NON_FAITE",
                    "jugement": request.data.get('jugement', ''),
                    "execution_faite": request.data.get('execution_faite', False),
                    "type_execution": request.data.get('type_execution', '')
                }
                etape.documents_requis = json.dumps(metadonnees, ensure_ascii=False)
                
                print(f"‚úÖ Tentative de sauvegarde de l'√©tape...")
                etape.save()
                print(f"‚úÖ √âtape sauvegard√©e avec les donn√©es p√©nales")
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")
                return Response({'error': f'Erreur lors de la sauvegarde: {str(e)}'}, status=400)
        else:
            print(f"‚ùå Pas de donn√©es p√©nales d√©tect√©es")
        
        # R√©cup√©rer les donn√©es du huissier et de l'opposant si fournies
        huissier_id = request.data.get('huissier_id')
        opposant_id = request.data.get('opposant_id')
        
        # R√©cup√©rer les donn√©es de d√©lib√©ration si fournies
        type_deliberation = request.data.get('type_deliberation', None)
        type_intervention = request.data.get('type_intervention', None)
        intervenant_inspection = request.data.get('intervenant_inspection', None)
        type_expertise = request.data.get('type_expertise', None)
        expert_selection = request.data.get('expert_selection', None)
        
        # R√©cup√©rer les donn√©es des t√©moins si fournies
        temoins = request.data.get('temoins', [])
        
        # Construire les observations avec les d√©tails de d√©lib√©ration
        observations_completes = observations or ""
        
        if type_deliberation:
            observations_completes += f"\n\n=== D√âTAILS DE LA D√âLIB√âRATION ===\n"
            observations_completes += f"Type de d√©cision: {type_deliberation}\n"
            
            if type_deliberation == "inspection" and type_intervention:
                observations_completes += f"Type d'intervention: {type_intervention}\n"
                if intervenant_inspection:
                    observations_completes += f"Intervenant: {intervenant_inspection}\n"
                    
            elif type_deliberation == "expertise" and type_expertise:
                observations_completes += f"Type d'expertise: {type_expertise}\n"
                if expert_selection:
                    observations_completes += f"Expert s√©lectionn√©: {expert_selection}\n"
        
        # Ajouter les d√©tails des t√©moins si pr√©sents
        if temoins:
            observations_completes += f"\n\n=== T√âMOINS PR√âSENTS ===\n"
            for i, temoin in enumerate(temoins, 1):
                observations_completes += f"T√©moin {i}:\n"
                observations_completes += f"  - Nom: {temoin.get('nom', 'Non sp√©cifi√©')}\n"
                observations_completes += f"  - R√¥le: {temoin.get('role', 'Non sp√©cifi√©')}\n"
                if temoin.get('adresse'):
                    observations_completes += f"  - Adresse: {temoin['adresse']}\n"
                if temoin.get('telephone'):
                    observations_completes += f"  - T√©l√©phone: {temoin['telephone']}\n"
                observations_completes += "\n"
            
            # Cr√©er les t√©moins en base de donn√©es
            for temoin_data in temoins:
                # G√©n√©rer un ID unique pour le t√©moin
                temoin_id = f"T{date.today().strftime('%Y%m%d')}_{len(Temoin.objects.all()) + 1}"
                
                # Cr√©er le t√©moin
                temoin = Temoin.objects.create(
                    idtemoin=temoin_id,
                    nomtemoin=temoin.get('nom', ''),
                    adressetemoin=temoin.get('adresse', ''),
                    roletemoin=temoin.get('role', ''),
                    telephonetemoin=temoin.get('telephone', '')
                )
                
                # Cr√©er la participation du t√©moin √† l'√©tape
                Participationtemoinetape.objects.create(
                    idetape=etape,
                    idtemoin=temoin,
                    dateintervention=date.today(),
                    typeintervention="T√©moignage lors de l'audience"
                )
        
        # R√©cup√©rer les donn√©es d'audience selon l'√©tape
        tribunal_id = request.data.get('tribunal_id')
        date_audience = request.data.get('date_audience')
        heure_audience = request.data.get('heure_audience')
        
        # Donn√©es pour audience p√©nale
        tribunal_audience_penale_id = request.data.get('tribunal_audience_penale_id')
        date_audience_penale = request.data.get('date_audience_penale')
        heure_audience_penale = request.data.get('heure_audience_penale')
        
        print(f"=== DEBUG DONN√âES AUDIENCE ===")
        print(f"Donn√©es convocation: tribunal_id={tribunal_id}, date_audience={date_audience}, heure_audience={heure_audience}")
        print(f"Donn√©es p√©nale: tribunal_audience_penale_id={tribunal_audience_penale_id}, date_audience_penale={date_audience_penale}, heure_audience_penale={heure_audience_penale}")
        print(f"Tous les champs: {list(request.data.keys())}")
        
        # R√©cup√©rer les donn√©es de plainte si c'est l'√©tape "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ¥ŸÉÿßŸäÿ©"
        contenu_plainte = request.data.get('contenu_plainte')
        delai_reponse = request.data.get('delai_reponse')
        
        # R√©cup√©rer les donn√©es de repr√©sentation si c'est l'√©tape "ÿ™ŸÇÿØŸäŸÖ ÿ™ŸÖÿ´ŸäŸÑ"
        resume_contenu = request.data.get('resume_contenu')
        date_soumission = request.data.get('date_soumission')
        
        # R√©cup√©rer les donn√©es de d√©lib√©ration si c'est l'√©tape "ŸÖÿØÿßŸàŸÑÿ©"
        conclusion_definitives = request.data.get('conclusion_definitives')
        
        # R√©cup√©rer les donn√©es de r√©ponse si c'est l'√©tape "ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑŸÖŸÇÿßŸÑ"
        resume_reponse = request.data.get('resume_reponse')
        
        # R√©cup√©rer les donn√©es de plainte p√©nale si c'est l'√©tape "ÿ¥ŸÉÿßŸäÿ©"
        resume_faits = request.data.get('resume_faits')
        plainte_pdf = request.FILES.get('plainte_pdf') if request.FILES else None
        docs_supplementaires = request.FILES.getlist('docs_supplementaires') if request.FILES else None
        temoins_a_ajouter = request.data.get('temoins_a_ajouter', [])
        
        # Debug pour voir toutes les donn√©es re√ßues
        print(f"=== DEBUG DONNEES RECUES ===")
        print(f"Toutes les donn√©es re√ßues: {request.data}")
        print(f"contenu_plainte: '{contenu_plainte}'")
        print(f"delai_reponse: '{delai_reponse}'")
        print(f"resume_contenu: '{resume_contenu}'")
        print(f"date_soumission: '{date_soumission}'")
        print(f"conclusion_definitives: '{conclusion_definitives}'")
        print(f"resume_reponse: '{resume_reponse}'")
        print(f"resume_faits: '{resume_faits}'")
        print(f"plainte_pdf: {plainte_pdf}")
        print(f"docs_supplementaires: {docs_supplementaires}")
        print(f"temoins_a_ajouter: {temoins_a_ajouter}")
        
        # Debug pour v√©rifier le type d'√©tape
        print(f"=== DEBUG TYPE ETAPE ===")
        print(f"√âtape ID: {etape.idetape}")
        print(f"Type √©tape: {etape.idtypeetape}")
        if etape.idtypeetape:
            print(f"Libell√© type √©tape: '{etape.idtypeetape.libelletypeetape}'")
            print(f"Comparaison avec 'ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸÑŸÑŸÖÿ´ŸàŸÑ': {etape.idtypeetape.libelletypeetape == 'ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸÑŸÑŸÖÿ´ŸàŸÑ'}")
        
        # Traitement des donn√©es de plainte p√©nale pour l'√©tape "ÿ¥ŸÉÿßŸäÿ©" - AVANT TOUTE AUTRE TRAITEMENT
        if etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ÿ¥ŸÉÿßŸäÿ©":
            print(f"Traitement des donn√©es de plainte p√©nale pour l'√©tape ÿ¥ŸÉÿßŸäÿ©")
            print(f"R√©sum√© faits: {resume_faits}")
            print(f"Plainte PDF: {plainte_pdf}")
            print(f"Docs suppl√©mentaires: {docs_supplementaires}")
            
            # Stocker le r√©sum√© des faits dans le champ description_etape de l'√©tape
            if resume_faits:
                print(f"=== DEBUG AVANT MODIFICATION ===")
                print(f"description_etape avant: '{etape.description_etape}'")
                etape.description_etape = resume_faits
                print(f"=== DEBUG APR√àS MODIFICATION ===")
                print(f"description_etape apr√®s: '{etape.description_etape}'")
                print(f"‚úÖ R√©sum√© des faits stock√© dans description_etape: {resume_faits}")
            
            # Ajouter les autres informations aux observations
            if plainte_pdf or docs_supplementaires:
                observations_completes += f"\n\n=== DONNEES PLAINTE PENALE ===\n"
                
                # G√©rer l'upload de la plainte PDF
                if plainte_pdf:
                    try:
                        import uuid
                        file_extension = plainte_pdf.name.split('.')[-1]
                        filename = f"plainte_penale_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                        
                        from django.conf import settings
                        import os
                        
                        file_path = os.path.join(settings.MEDIA_ROOT, 'plaintes_penales', filename)
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        
                        with open(file_path, 'wb+') as destination:
                            for chunk in plainte_pdf.chunks():
                                destination.write(chunk)
                        
                        fichier = Fichier.objects.create(
                            nom_fichier=filename,
                            chemin_fichier=f'plaintes_penales/{filename}',
                            type_fichier='plainte_penale',
                            idaffaire=affaire,
                            date_upload=date.today()
                        )
                        
                        observations_completes += f"Plainte PDF: {filename}\n"
                        print(f"‚úÖ Plainte PDF sauvegard√©e: {filename}")
                        
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la sauvegarde de la plainte PDF: {str(e)}")
                        observations_completes += f"Erreur upload plainte PDF: {str(e)}\n"
                
                # G√©rer l'upload des documents suppl√©mentaires
                if docs_supplementaires:
                    try:
                        for i, doc in enumerate(docs_supplementaires):
                            import uuid
                            file_extension = doc.name.split('.')[-1]
                            filename = f"doc_supp_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                            
                            from django.conf import settings
                            import os
                            
                            file_path = os.path.join(settings.MEDIA_ROOT, 'docs_supplementaires', filename)
                            os.makedirs(os.path.dirname(file_path), exist_ok=True)
                            
                            with open(file_path, 'wb+') as destination:
                                for chunk in doc.chunks():
                                    destination.write(chunk)
                            
                            fichier = Fichier.objects.create(
                                nom_fichier=filename,
                                chemin_fichier=f'docs_supplementaires/{filename}',
                                type_fichier='doc_supplementaire',
                                idaffaire=affaire,
                                date_upload=date.today()
                            )
                            
                            observations_completes += f"Document suppl√©mentaire {i+1}: {filename}\n"
                            print(f"‚úÖ Document suppl√©mentaire {i+1} sauvegard√©: {filename}")
                            
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la sauvegarde des documents suppl√©mentaires: {str(e)}")
                        observations_completes += f"Erreur upload docs suppl√©mentaires: {str(e)}\n"
                
                # Cr√©er les participations des t√©moins apr√®s la cr√©ation de l'√©tape
                if temoins_a_ajouter and len(temoins_a_ajouter) > 0:
                    print(f"Cr√©ation des participations pour {len(temoins_a_ajouter)} t√©moins")
                    for temoin_id in temoins_a_ajouter:
                        try:
                            from .models import Participationtemoinetape
                            participation_data = {
                                'idetape': etape,
                                'idtemoin_id': temoin_id,
                                'dateintervention': date.today(),
                            }
                            Participationtemoinetape.objects.create(**participation_data)
                            print(f"‚úÖ Participation cr√©√©e pour le t√©moin {temoin_id}")
                        except Exception as e:
                            print(f"‚ùå Erreur lors de la cr√©ation de la participation pour le t√©moin {temoin_id}: {str(e)}")
        
        # Traitement des √©tapes p√©nales de la phase PROC√âDURE
        # 1. √âtape "ÿßŸÑÿ™ÿ≠ŸÇŸäŸÇ ÿßŸÑÿ£ŸàŸÑŸä" (Enqu√™te pr√©liminaire)
        if etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ÿßŸÑÿ™ÿ≠ŸÇŸäŸÇ ÿßŸÑÿ£ŸàŸÑŸä":
            print(f"Traitement des donn√©es d'enqu√™te pr√©liminaire pour l'√©tape ÿßŸÑÿ™ÿ≠ŸÇŸäŸÇ ÿßŸÑÿ£ŸàŸÑŸä")
            
            # R√©cup√©rer les donn√©es de l'enqu√™te pr√©liminaire
            enquete_effectuee = request.data.get('enquete_effectuee', False)
            observations_enquete = request.data.get('observations_enquete', '')
            
            print(f"Enqu√™te effectu√©e: {enquete_effectuee}")
            print(f"Observations enqu√™te: {observations_enquete}")
            
            # Construire les observations pour l'enqu√™te pr√©liminaire
            observations_enquete_completes = f"\n\n=== ENQU√äTE PR√âLIMINAIRE ===\n"
            observations_enquete_completes += f"Enqu√™te pr√©liminaire effectu√©e: {enquete_effectuee}\n"
            if observations_enquete:
                observations_enquete_completes += f"Observations: {observations_enquete}\n"
            
            observations_completes += observations_enquete_completes
            print(f"‚úÖ Donn√©es d'enqu√™te pr√©liminaire ajout√©es aux observations")
        
        # 2. √âtape "ŸÇÿ±ÿßÿ± ÿßŸÑŸÜŸäÿßÿ®ÿ© ÿßŸÑÿπÿßŸÖÿ©" (D√©cision du parquet)
        elif etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ŸÇÿ±ÿßÿ± ÿßŸÑŸÜŸäÿßÿ®ÿ© ÿßŸÑÿπÿßŸÖÿ©":
            print(f"Traitement des donn√©es de d√©cision du parquet pour l'√©tape ŸÇÿ±ÿßÿ± ÿßŸÑŸÜŸäÿßÿ®ÿ© ÿßŸÑÿπÿßŸÖÿ©")
            
            # R√©cup√©rer les donn√©es de la d√©cision du parquet
            type_decision = request.data.get('type_decision', '')
            tribunal_competent_id = request.data.get('tribunal_competent_id', '')
            observations_decision = request.data.get('observations_decision', '')
            decision_officielle_pdf = request.FILES.get('decision_officielle_pdf') if request.FILES else None
            
            print(f"Type de d√©cision: {type_decision}")
            print(f"Tribunal comp√©tent ID: {tribunal_competent_id}")
            print(f"Observations d√©cision: {observations_decision}")
            print(f"PDF d√©cision officielle: {decision_officielle_pdf}")
            
            # Construire les observations pour la d√©cision du parquet
            observations_decision_completes = f"\n\n=== D√âCISION DU PARQUET ===\n"
            observations_decision_completes += f"Type de d√©cision: {type_decision}\n"
            if tribunal_competent_id:
                observations_decision_completes += f"Tribunal comp√©tent: {tribunal_competent_id}\n"
            if observations_decision:
                observations_decision_completes += f"Observations: {observations_decision}\n"
            
            # G√©rer l'upload du PDF de la d√©cision officielle
            if decision_officielle_pdf:
                try:
                    import uuid
                    file_extension = decision_officielle_pdf.name.split('.')[-1]
                    filename = f"decision_parquet_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                    
                    from django.conf import settings
                    import os
                    
                    file_path = os.path.join(settings.MEDIA_ROOT, 'decisions_parquet', filename)
                    os.makedirs(os.path.dirname(file_path), exist_ok=True)
                    
                    with open(file_path, 'wb+') as destination:
                        for chunk in decision_officielle_pdf.chunks():
                            destination.write(chunk)
                    
                    fichier = Fichier.objects.create(
                        nom_fichier=filename,
                        chemin_fichier=f'decisions_parquet/{filename}',
                        type_fichier='decision_parquet',
                        idaffaire=affaire,
                        date_upload=date.today()
                    )
                    
                    observations_decision_completes += f"PDF d√©cision officielle: {filename}\n"
                    print(f"‚úÖ PDF d√©cision officielle sauvegard√©: {filename}")
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors de la sauvegarde du PDF d√©cision officielle: {str(e)}")
                    observations_decision_completes += f"Erreur upload PDF d√©cision: {str(e)}\n"
            
            observations_completes += observations_decision_completes
            print(f"‚úÖ Donn√©es de d√©cision du parquet ajout√©es aux observations")
        
        # 3. √âtape "ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©" (Audience p√©nale) - UNIQUEMENT par type
        is_audience_penale = (
            etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©"
        )
        
        print(f"=== DEBUG AUDIENCE P√âNALE ===")
        print(f"is_audience_penale: {is_audience_penale}")
        print(f"Reconnaissance par type: {etape.idtypeetape and etape.idtypeetape.libelletypeetape == 'ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©'}")
        
        if is_audience_penale:
            print(f"üéØ √âTAPE RECONNUE: ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ© (par type ou par ID)")
            print(f"Traitement des donn√©es d'audience p√©nale pour l'√©tape ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©")
            print(f"=== DEBUG IDENTIFICATION √âTAPE ===")
            print(f"√âtape ID: {etape.idetape}")
            print(f"Type √©tape: {etape.idtypeetape}")
            if etape.idtypeetape:
                print(f"Libell√© type √©tape: '{etape.idtypeetape.libelletypeetape}'")
            print(f"Reconnaissance par ID: {'etape_2' in str(etape.idetape)}")
            
            # Debug des donn√©es re√ßues
            print(f"=== DEBUG DONN√âES RE√áUES ===")
            print(f"request.data complet: {request.data}")
            print(f"request.FILES: {request.FILES}")
            
            # R√©cup√©rer les donn√©es de l'audience p√©nale
            date_audience_penale = request.data.get('date_audience_penale')
            heure_audience_penale = request.data.get('heure_audience_penale')
            tribunal_audience_penale_id = request.data.get('tribunal_audience_penale_id')
            plaignant_present = request.data.get('plaignant_present', False)
            accuse_present = request.data.get('accuse_present', False)
            avocat_present = request.data.get('avocat_present', False)
            ministere_public_present = request.data.get('ministere_public_present', False)
            temoins_a_ajouter_audience = request.data.get('temoins_a_ajouter', [])
            compte_rendu_audience_pdf = request.FILES.get('compte_rendu_audience_pdf') if request.FILES else None
            observations_audience = request.data.get('observations_audience', '')
            
            # Convertir la cha√Æne JSON en liste si n√©cessaire
            if isinstance(temoins_a_ajouter_audience, str):
                try:
                    import json
                    temoins_a_ajouter_audience = json.loads(temoins_a_ajouter_audience)
                except json.JSONDecodeError:
                    temoins_a_ajouter_audience = []
                    print(f"‚ùå Erreur lors du parsing JSON des t√©moins: {temoins_a_ajouter_audience}")
            
            print(f"Date audience p√©nale: {date_audience_penale}")
            print(f"Heure audience p√©nale: {heure_audience_penale}")
            print(f"Tribunal audience p√©nale ID: {tribunal_audience_penale_id}")
            print(f"Pr√©sence - Plaignant: {plaignant_present}, Accus√©: {accuse_present}, Avocat: {avocat_present}, Minist√®re public: {ministere_public_present}")
            print(f"T√©moins audience: {temoins_a_ajouter_audience}")
            print(f"PDF compte-rendu audience: {compte_rendu_audience_pdf}")
            print(f"Observations audience: {observations_audience}")
            
            # Construire les observations pour l'audience p√©nale
            observations_audience_completes = f"\n\n=== AUDIENCE P√âNALE ===\n"
            if date_audience_penale:
                observations_audience_completes += f"Date d'audience: {date_audience_penale}\n"
            if heure_audience_penale:
                observations_audience_completes += f"Heure d'audience: {heure_audience_penale}\n"
            if tribunal_audience_penale_id:
                observations_audience_completes += f"Tribunal: {tribunal_audience_penale_id}\n"
            
            observations_audience_completes += f"Pr√©sence des parties:\n"
            observations_audience_completes += f"  - Plaignant: {plaignant_present}\n"
            observations_audience_completes += f"  - Accus√©: {accuse_present}\n"
            observations_audience_completes += f"  - Avocat du plaignant: {avocat_present}\n"
            observations_audience_completes += f"  - Minist√®re public: {ministere_public_present}\n"
            
            if observations_audience:
                observations_audience_completes += f"Observations: {observations_audience}\n"
            
            # Cr√©er l'audience p√©nale dans la table Audience - ADAPT√âE de la logique "ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸÑŸÑŸÖÿ´ŸàŸÑ"
            print(f"=== DEBUG CR√âATION AUDIENCE ===")
            print(f"date_audience_penale: '{date_audience_penale}' (type: {type(date_audience_penale)})")
            print(f"tribunal_audience_penale_id: '{tribunal_audience_penale_id}' (type: {type(tribunal_audience_penale_id)})")
            
            # Cr√©er l'audience dans TOUS les cas pour l'√©tape ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©
            print(f"üéØ CR√âATION FORC√âE DE L'AUDIENCE P√âNALE")
            try:
                # G√©n√©rer un ID unique pour l'audience p√©nale
                import uuid
                audience_penale_id = f"AUD_PEN_{date.today().strftime('%Y%m%d')}_{uuid.uuid4().hex[:8]}"
                print(f"ID audience p√©nale g√©n√©r√©: {audience_penale_id}")
                
                # Pr√©parer les donn√©es de l'audience
                audience_penale_data = {
                    'idaudience': audience_penale_id,
                    'idaffaire': affaire,
                }
                
                # Ajouter le tribunal si fourni
                if tribunal_audience_penale_id:
                    try:
                        tribunal_audience = Tribunal.objects.get(idtribunal=tribunal_audience_penale_id)
                        audience_penale_data['idtribunal'] = tribunal_audience
                        print(f"‚úÖ Tribunal audience trouv√©: {tribunal_audience.nomtribunal_fr or tribunal_audience.nomtribunal_ar or ''}")
                    except Tribunal.DoesNotExist:
                        print(f"‚ùå Tribunal {tribunal_audience_penale_id} non trouv√©!")
                        observations_audience_completes += f"Erreur: Tribunal {tribunal_audience_penale_id} non trouv√©\n"
                        # Continuer sans tribunal
                else:
                    print(f"‚ö†Ô∏è Aucun tribunal sp√©cifi√© pour l'audience")
                
                # Ajouter la date si fournie
                if date_audience_penale:
                    audience_penale_data['dateaudience'] = date_audience_penale
                    print(f"‚úÖ Date d'audience ajout√©e: {date_audience_penale}")
                else:
                    # Utiliser la date d'aujourd'hui par d√©faut
                    audience_penale_data['dateaudience'] = date.today()
                    print(f"‚ö†Ô∏è Date d'audience par d√©faut: {date.today()}")
                
                # Ajouter l'heure si fournie (v√©rifier si la colonne existe)
                if heure_audience_penale:
                    try:
                        audience_penale_data['heureaudience'] = heure_audience_penale
                        print(f"‚úÖ Heure d'audience ajout√©e: {heure_audience_penale}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Impossible d'ajouter l'heure d'audience (colonne manquante): {str(e)}")
                        # Continuer sans l'heure
                
                # Ajouter les remarques (sans caract√®res arabes pour √©viter les probl√®mes d'encodage)
                audience_penale_data['remarques'] = f"Audience penale - Presence: Plaignant({plaignant_present}), Accuse({accuse_present}), Avocat({avocat_present}), Ministere public({ministere_public_present})"
                
                print(f"‚úÖ Donn√©es audience pr√©par√©es: {audience_penale_data}")
                audience_penale = Audience.objects.create(**audience_penale_data)
                print(f"‚úÖ Audience p√©nale cr√©√©e avec succ√®s: {audience_penale.idaudience}")
                
                # Cr√©er le statut de l'audience p√©nale
                StatutAudience.objects.create(
                    idaudience=audience_penale,
                    libellestatutaudience='Programm√©e',
                    datedebut=date.today()
                )
                
                observations_audience_completes += f"Audience cr√©√©e avec succ√®s: {audience_penale_id}\n"
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation de l'audience p√©nale: {str(e)}")
                # Essayer de cr√©er l'audience avec des donn√©es minimales
                try:
                    audience_penale_data_minimal = {
                        'idaudience': audience_penale_id,
                        'idaffaire': affaire,
                        'dateaudience': date.today(),
                        'remarques': f"Audience penale - Erreur creation - Presence: Plaignant({plaignant_present}), Accuse({accuse_present}), Avocat({avocat_present}), Ministere public({ministere_public_present})"
                    }
                    audience_penale = Audience.objects.create(**audience_penale_data_minimal)
                    print(f"‚úÖ Audience p√©nale cr√©√©e avec donn√©es minimales: {audience_penale.idaudience}")
                    observations_audience_completes += f"Audience cr√©√©e avec donn√©es minimales: {audience_penale_id}\n"
                except Exception as e2:
                    print(f"‚ùå Erreur m√™me avec donn√©es minimales: {str(e2)}")
                    observations_audience_completes += f"Erreur cr√©ation audience: {str(e2)}\n"
            
            # G√©rer l'upload du PDF du compte-rendu d'audience
            if compte_rendu_audience_pdf:
                try:
                    import uuid
                    file_extension = compte_rendu_audience_pdf.name.split('.')[-1]
                    filename = f"compte_rendu_audience_penale_{affaire.idaffaire}_{uuid.uuid4().hex[:8]}.{file_extension}"
                    
                    from django.conf import settings
                    import os
                    
                    file_path = os.path.join(settings.MEDIA_ROOT, 'comptes_rendus_audience', filename)
                    os.makedirs(os.path.dirname(file_path), exist_ok=True)
                    
                    with open(file_path, 'wb+') as destination:
                        for chunk in compte_rendu_audience_pdf.chunks():
                            destination.write(chunk)
                    
                    fichier = Fichier.objects.create(
                        nom_fichier=filename,
                        chemin_fichier=f'comptes_rendus_audience/{filename}',
                        type_fichier='compte_rendu_audience_penale',
                        idaffaire=affaire,
                        date_upload=date.today()
                    )
                    
                    observations_audience_completes += f"Compte-rendu d'audience (PDF): {filename}\n"
                    print(f"‚úÖ Compte-rendu d'audience PDF sauvegard√©: {filename}")
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors de la sauvegarde du compte-rendu d'audience PDF: {str(e)}")
                    observations_audience_completes += f"Erreur upload compte-rendu audience PDF: {str(e)}\n"
            
            # Cr√©er les participations des t√©moins pour l'audience p√©nale
            if temoins_a_ajouter_audience and len(temoins_a_ajouter_audience) > 0:
                print(f"Cr√©ation des participations pour {len(temoins_a_ajouter_audience)} t√©moins de l'audience p√©nale")
                for temoin_id in temoins_a_ajouter_audience:
                    try:
                        from .models import Participationtemoinetape
                        participation_data = {
                            'idetape': etape,
                            'idtemoin_id': temoin_id,
                            'dateintervention': date.today(),
                        }
                        Participationtemoinetape.objects.create(**participation_data)
                        print(f"‚úÖ Participation cr√©√©e pour le t√©moin {temoin_id} de l'audience p√©nale")
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la cr√©ation de la participation pour le t√©moin {temoin_id} de l'audience p√©nale: {str(e)}")
            
            observations_completes += observations_audience_completes
            print(f"‚úÖ Donn√©es d'audience p√©nale ajout√©es aux observations")
        
        # ===== GESTION UNIFI√âE DES AUDIENCES =====
        print(f"=== GESTION AUDIENCES ===")
        print(f"√âtape ID: {etape.idetape}")
        print(f"Type √©tape: {etape.idtypeetape}")
        if etape.idtypeetape:
            etape_libelle = etape.idtypeetape.libelletypeetape
            print(f"Libell√© √©tape: '{etape_libelle}'")
            print(f"Longueur libell√©: {len(etape_libelle)}")
            print(f"Caract√®res libell√©: {[ord(c) for c in etape_libelle]}")
        else:
            print(f"‚ùå Aucun type d'√©tape trouv√©!")
            etape_libelle = None
        
        # Fonction pour cr√©er une audience
        def creer_audience(etape_type, tribunal_id, date_audience, heure_audience, remarques):
            print(f"üîß Tentative cr√©ation audience: {etape_type}")
            print(f"   - tribunal_id: {tribunal_id}")
            print(f"   - date_audience: {date_audience}")
            print(f"   - heure_audience: {heure_audience}")
            
            if not tribunal_id or not date_audience:
                print(f"‚ùå Donn√©es manquantes pour cr√©er l'audience: tribunal_id={tribunal_id}, date_audience={date_audience}")
                return None
                
            try:
                import uuid
                audience_id = f"AUD_{date.today().strftime('%Y%m%d')}_{uuid.uuid4().hex[:8]}"
                print(f"   - audience_id g√©n√©r√©: {audience_id}")
                
                # R√©cup√©rer le tribunal
                tribunal = Tribunal.objects.get(idtribunal=tribunal_id)
                print(f"   - tribunal trouv√©: {tribunal.nomtribunal_fr or tribunal.nomtribunal_ar or ''}")
                
                audience_data = {
                    'idaudience': audience_id,
                    'idaffaire': affaire,
                    'idtribunal': tribunal,
                    'dateaudience': date_audience,
                    'heureaudience': heure_audience,
                    'remarques': remarques
                }
                print(f"   - audience_data: {audience_data}")
                
                audience = Audience.objects.create(**audience_data)
                print(f"   - audience cr√©√©e en base: {audience.idaudience}")
                
                # Cr√©er le statut
                StatutAudience.objects.create(
                    idaudience=audience,
                    libellestatutaudience='Programm√©e',
                    datedebut=date.today()
                )
                print(f"   - statut cr√©√©")
                
                print(f"‚úÖ Audience cr√©√©e avec succ√®s: {audience_id}")
                return audience
                
            except Exception as e:
                print(f"‚ùå Erreur cr√©ation audience: {str(e)}")
                import traceback
                print(f"‚ùå Traceback: {traceback.format_exc()}")
                return None
        
        # Cr√©er audience selon le type d'√©tape
        if etape_libelle:
            print(f"üéØ Traitement de l'√©tape: '{etape_libelle}'")
            
            # √âtape "ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸÑŸÑŸÖÿ´ŸàŸÑ" (Convocation)
            if etape_libelle == "ÿßÿ≥ÿ™ÿØÿπÿßÿ° ŸÑŸÑŸÖÿ´ŸàŸÑ":
                print(f"üéØ CR√âATION AUDIENCE CONVOCATION")
                
                # V√©rifier si c'est une affaire p√©nale (donn√©es d'audience p√©nale pr√©sentes)
                date_audience_penale = request.data.get('date_audience_penale')
                heure_audience_penale = request.data.get('heure_audience_penale')
                tribunal_audience_penale_id = request.data.get('tribunal_audience_penale_id')
                
                if date_audience_penale and tribunal_audience_penale_id:
                    print(f"üéØ D√©tection affaire p√©nale - Utilisation des donn√©es d'audience p√©nale")
                    plaignant_present = request.data.get('plaignant_present', False)
                    accuse_present = request.data.get('accuse_present', False)
                    avocat_present = request.data.get('avocat_present', False)
                    ministere_public_present = request.data.get('ministere_public_present', False)
                    
                    audience = creer_audience(
                        etape_type="penale",
                        tribunal_id=tribunal_audience_penale_id,
                        date_audience=date_audience_penale,
                        heure_audience=heure_audience_penale,
                        remarques=f"Audience penale - Presence: Plaignant({plaignant_present}), Accuse({accuse_present}), Avocat({avocat_present}), Ministere public({ministere_public_present})"
                    )
                    if audience:
                        observations_completes += f"\n=== AUDIENCE PENALE ===\nTribunal: {audience.idtribunal.nomtribunal_fr or audience.idtribunal.nomtribunal_ar or ''}\nDate: {date_audience_penale}\nHeure: {heure_audience_penale or 'Non sp√©cifi√©e'}\n"
                else:
                    print(f"üéØ Affaire non-p√©nale - Utilisation des donn√©es de convocation normale")
                    audience = creer_audience(
                        etape_type="convocation",
                        tribunal_id=tribunal_id,
                        date_audience=date_audience,
                        heure_audience=heure_audience,
                        remarques="Audience convocation"
                    )
                    if audience:
                        observations_completes += f"\n=== AUDIENCE CONVOCATION ===\nTribunal: {audience.idtribunal.nomtribunal_fr or audience.idtribunal.nomtribunal_ar or ''}\nDate: {date_audience}\nHeure: {heure_audience or 'Non sp√©cifi√©e'}\n"
            
            # √âtape "ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©" (Audience p√©nale)
            elif etape_libelle == "ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≠ÿßŸÉŸÖÿ©":
                print(f"üéØ CR√âATION AUDIENCE P√âNALE")
                # R√©cup√©rer les donn√©es sp√©cifiques √† l'audience p√©nale
                date_audience_penale = request.data.get('date_audience_penale')
                heure_audience_penale = request.data.get('heure_audience_penale')
                tribunal_audience_penale_id = request.data.get('tribunal_audience_penale_id')
                plaignant_present = request.data.get('plaignant_present', False)
                accuse_present = request.data.get('accuse_present', False)
                avocat_present = request.data.get('avocat_present', False)
                ministere_public_present = request.data.get('ministere_public_present', False)
                
                audience = creer_audience(
                    etape_type="penale",
                    tribunal_id=tribunal_audience_penale_id,
                    date_audience=date_audience_penale,
                    heure_audience=heure_audience_penale,
                    remarques=f"Audience penale - Presence: Plaignant({plaignant_present}), Accuse({accuse_present}), Avocat({avocat_present}), Ministere public({ministere_public_present})"
                )
                if audience:
                    observations_completes += f"\n=== AUDIENCE PENALE ===\nTribunal: {audience.idtribunal.nomtribunal_fr or audience.idtribunal.nomtribunal_ar or ''}\nDate: {date_audience_penale}\nHeure: {heure_audience_penale or 'Non sp√©cifi√©e'}\n"
            
            # Autres √©tapes - Cr√©er une audience si des donn√©es sont fournies
            else:
                print(f"‚ÑπÔ∏è √âtape '{etape_libelle}' - V√©rification si donn√©es d'audience disponibles")
                
                # Si des donn√©es d'audience sont fournies, cr√©er une audience g√©n√©rique
                if tribunal_id and date_audience:
                    print(f"üéØ CR√âATION AUDIENCE G√âN√âRIQUE pour l'√©tape '{etape_libelle}'")
                    audience = creer_audience(
                        etape_type="generique",
                        tribunal_id=tribunal_id,
                        date_audience=date_audience,
                        heure_audience=heure_audience,
                        remarques=f"Audience pour √©tape: {etape_libelle}"
                    )
                    if audience:
                        observations_completes += f"\n=== AUDIENCE G√âN√âRIQUE ===\n√âtape: {etape_libelle}\nTribunal: {audience.idtribunal.nomtribunal_fr or audience.idtribunal.nomtribunal_ar or ''}\nDate: {date_audience}\nHeure: {heure_audience or 'Non sp√©cifi√©e'}\n"
                else:
                    print(f"‚ÑπÔ∏è Aucune donn√©e d'audience fournie pour l'√©tape '{etape_libelle}'")
        else:
            print(f"‚ùå Impossible de traiter l'audience - Aucun libell√© d'√©tape")
            
        
        # Traitement des donn√©es de plainte pour l'√©tape "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ¥ŸÉÿßŸäÿ©"
        if etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ¥ŸÉÿßŸäÿ©":
            print(f"Traitement des donn√©es de plainte pour l'√©tape ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ¥ŸÉÿßŸäÿ©")
            print(f"Contenu plainte: {contenu_plainte}")
            print(f"D√©lai r√©ponse: {delai_reponse}")
            
            # Ajouter les informations de plainte aux observations
            if contenu_plainte or delai_reponse:
                observations_completes += f"\n\n=== DONNEES PLAINTE ===\n"
                if contenu_plainte:
                    observations_completes += f"Contenu de la plainte: {contenu_plainte}\n"
                if delai_reponse:
                    observations_completes += f"D√©lai de r√©ponse: {delai_reponse}\n"
                
                # Mettre √† jour les observations de l'√©tape
                etape.observations_etape = observations_completes
                etape.save()
                print(f"‚úÖ Donn√©es de plainte ajout√©es aux observations")
        
        # Traitement des donn√©es de repr√©sentation pour l'√©tape "ÿ™ŸÇÿØŸäŸÖ ÿ™ŸÖÿ´ŸäŸÑ"
        if etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ÿ™ŸÇÿØŸäŸÖ ÿ™ŸÖÿ´ŸäŸÑ":
            print(f"Traitement des donn√©es de repr√©sentation pour l'√©tape ÿ™ŸÇÿØŸäŸÖ ÿ™ŸÖÿ´ŸäŸÑ")
            print(f"R√©sum√© contenu: {resume_contenu}")
            print(f"Date soumission: {date_soumission}")
            
            # Ajouter les informations de repr√©sentation aux observations
            if resume_contenu or date_soumission:
                observations_completes += f"\n\n=== DONNEES REPRESENTATION ===\n"
                if resume_contenu:
                    observations_completes += f"R√©sum√© du contenu: {resume_contenu}\n"
                if date_soumission:
                    observations_completes += f"Date de soumission: {date_soumission}\n"
                
                # Mettre √† jour les observations de l'√©tape
                etape.observations_etape = observations_completes
                etape.save()
                print(f"‚úÖ Donn√©es de repr√©sentation ajout√©es aux observations")
        
        # Traitement des donn√©es de d√©lib√©ration pour l'√©tape "ŸÖÿØÿßŸàŸÑÿ©"
        if etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ŸÖÿØÿßŸàŸÑÿ©":
            print(f"Traitement des donn√©es de d√©lib√©ration pour l'√©tape ŸÖÿØÿßŸàŸÑÿ©")
            print(f"Conclusion d√©finitives: {conclusion_definitives}")
            
            # Ajouter les informations de d√©lib√©ration aux observations
            if conclusion_definitives:
                observations_completes += f"\n\n=== DONNEES DELIBERATION ===\n"
                observations_completes += f"Conclusion d√©finitives: {conclusion_definitives}\n"
                
                # Mettre √† jour les observations de l'√©tape
                etape.observations_etape = observations_completes
                etape.save()
                print(f"‚úÖ Donn√©es de d√©lib√©ration ajout√©es aux observations")
        
        # Traitement des donn√©es de r√©ponse pour l'√©tape "ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑŸÖŸÇÿßŸÑ"
        if etape.idtypeetape and etape.idtypeetape.libelletypeetape == "ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑŸÖŸÇÿßŸÑ":
            print(f"Traitement des donn√©es de r√©ponse pour l'√©tape ÿ±ÿØ ÿπŸÑŸâ ÿßŸÑŸÖŸÇÿßŸÑ")
            print(f"R√©sum√© r√©ponse: {resume_reponse}")
            
            # Ajouter les informations de r√©ponse aux observations
            if resume_reponse:
                observations_completes += f"\n\n=== DONNEES REPONSE ===\n"
                observations_completes += f"R√©sum√© de la r√©ponse: {resume_reponse}\n"
                
                # Mettre √† jour les observations de l'√©tape
                etape.observations_etape = observations_completes
                etape.save()
                print(f"‚úÖ Donn√©es de r√©ponse ajout√©es aux observations")
        

        
        # Mettre √† jour les observations de l'√©tape avec toutes les donn√©es collect√©es
        etape.observations_etape = observations_completes
        
        # Sauvegarder l'√©tape avec toutes les modifications
        etape.save()
        print(f"‚úÖ √âtape sauvegard√©e avec succ√®s")
        
        # Mettre √† jour les param√®tres de notification de l'affaire si fournis
        if huissier_id or opposant_id:
            if huissier_id:
                affaire.huissier_notification_id = huissier_id
            if opposant_id:
                affaire.opposant_notification_id = opposant_id
            affaire.save()
        
        # NOUVEAU : Mettre √† jour l'√©tape actuelle et fermer les √©tapes pr√©c√©dentes
        print(f"üîÑ Mise √† jour de l'√©tape actuelle et fermeture des √©tapes pr√©c√©dentes")
        
        # 1. Marquer l'√©tape actuelle comme termin√©e
        if not etape.date_fin_effective:
            etape.date_fin_effective = date.today()
            etape.save()
            print(f"‚úÖ √âtape {etape.idetape} marqu√©e comme termin√©e (date_fin_effective: {etape.date_fin_effective})")
        
        # 2. Fermer toutes les √©tapes pr√©c√©dentes non termin√©es
        etapes_precedentes = Etapejudiciaire.objects.filter(
            idaffaire=affaire,
            ordre_etape__lt=etape.ordre_etape,
            date_fin_effective__isnull=True
        )
        for etape_prec in etapes_precedentes:
            etape_prec.date_fin_effective = date.today()
            etape_prec.save()
            print(f"‚úÖ √âtape pr√©c√©dente {etape_prec.idetape} ferm√©e (date_fin_effective: {etape_prec.date_fin_effective})")
        
        # 3. NOUVELLE LOGIQUE : Utiliser get_etape_actuelle_par_phase pour d√©terminer la prochaine √©tape
        print(f"üîÑ NOUVELLE LOGIQUE: D√©termination de l'√©tape actuelle avec get_etape_actuelle_par_phase")
        
        from .services import get_etape_actuelle_par_phase
        nouvelle_etape_actuelle = get_etape_actuelle_par_phase(affaire)
        
        if nouvelle_etape_actuelle:
            # Mettre √† jour l'√©tape actuelle de l'affaire avec la nouvelle logique
            affaire.etape_actuelle = nouvelle_etape_actuelle
            affaire.save()
            print(f"‚úÖ √âtape actuelle mise √† jour avec la nouvelle logique: {nouvelle_etape_actuelle.idetape}")
            print(f"‚úÖ Type d'√©tape: {nouvelle_etape_actuelle.idtypeetape.libelletypeetape if nouvelle_etape_actuelle.idtypeetape else 'Sans type'}")
            
            # D√©marrer la nouvelle √©tape si elle n'est pas encore commenc√©e
            if not nouvelle_etape_actuelle.date_debut_effective:
                nouvelle_etape_actuelle.date_debut_effective = date.today()
                nouvelle_etape_actuelle.save()
                print(f"‚úÖ Nouvelle √©tape {nouvelle_etape_actuelle.idetape} d√©marr√©e")
            
            prochaine_etape = nouvelle_etape_actuelle
        else:
            # Si pas de nouvelle √©tape, l'√©tape actuelle reste la m√™me
            affaire.etape_actuelle = etape
            affaire.save()
            print(f"‚ÑπÔ∏è Aucune nouvelle √©tape trouv√©e, √©tape actuelle reste: {etape.idetape}")
            prochaine_etape = None
        
        # Cr√©er le statut termin√©
        StatutEtape.objects.create(
            idetape=etape,
            libellestatutetape='Terminee',
            datedebut=date.today()
        )
        
        # Cr√©er le statut en cours pour l'√©tape suivante si elle existe
        if prochaine_etape:
            StatutEtape.objects.create(
                idetape=prochaine_etape,
                libellestatutetape='En cours',
                datedebut=date.today()
            )
            print(f"‚úÖ Statut 'En cours' cr√©√© pour l'√©tape suivante: {prochaine_etape.idetape}")
        else:
            print(f"‚ÑπÔ∏è Aucune √©tape suivante, pas de statut 'En cours' √† cr√©er")
        
        return Response({
            'message': '√âtape compl√©t√©e avec succ√®s',
            'etape_suivante': prochaine_etape.idetape if prochaine_etape else None
        })
        
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Etapejudiciaire.DoesNotExist:
        return Response({'error': '√âtape non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de la compl√©tion: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
def types_avertissement(request):
    """R√©cup√©rer tous les types d'avertissement"""
    try:
        types = TypeAvertissement.objects.all()
        data = []
        for type_avert in types:
            data.append({
                'idTypeAvertissement': type_avert.idtypeavertissement,
                'libelle': type_avert.libelle_fr or type_avert.libelle_ar or '',
                'libelle_ar': type_avert.libelle_ar,
                'delai_legal': type_avert.delai_legal,
                'obligatoire': type_avert.obligatoire,
                'description': type_avert.description,
                'categorie': type_avert.categorie,
                'notification_automatique': type_avert.notification_automatique
            })
        return Response(data)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
def types_demande(request):
    """R√©cup√©rer tous les types de demande"""
    try:
        types = TypeDemande.objects.all()
        data = []
        for type_demande in types:
            data.append({
                'idTypeDemande': type_demande.idtypedemande,
                'libelle': type_demande.libelle_fr or type_demande.libelle_ar or '',
                'libelle_ar': type_demande.libelle_ar,
                'delai_legal': type_demande.delai_legal,
                'categorie': type_demande.categorie,
                'description': type_demande.description,
                'documents_requis': type_demande.documents_requis,
                'notification_automatique': type_demande.notification_automatique
            })
        return Response(data)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
def creer_etape_personnalisee(request, affaire_id):
    """Cr√©er une √©tape personnalis√©e pour une affaire"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        libelle = request.data.get('libelle')
        delai = request.data.get('delai_legal', 0)
        observations = request.data.get('observations', '')
        
        if not libelle:
            return Response({'error': 'Libell√© requis'}, status=status.HTTP_400_BAD_REQUEST)
        
        # Cr√©er le type d'√©tape s'il n'existe pas
        type_etape, created = TypeEtape.objects.get_or_create(
            libelletypeetape=libelle
        )
        
        # D√©terminer l'ordre de l'√©tape
        ordre_max = Etapejudiciaire.objects.filter(idaffaire=affaire).aggregate(
            Max('ordre_etape')
        )['ordre_etape__max'] or 0
        
        # G√©n√©rer un ID unique pour l'√©tape
        import uuid
        etape_id = f"ETAPE_{uuid.uuid4().hex[:8].upper()}"
        
        # Cr√©er l'√©tape
        etape = Etapejudiciaire.objects.create(
            idetape=etape_id,
            idaffaire=affaire,
            idtypeetape=type_etape,
            delai_legal=delai,
            ordre_etape=ordre_max + 1,
            description_etape=observations,
            observations_etape='',
            datedebut=date.today()
        )
        
        return Response({
            'message': '√âtape cr√©√©e avec succ√®s',
            'etape': {
                'id': etape.idetape,
                'libelle': libelle,
                'delai': delai,
                'ordre': etape.ordre_etape
            }
        })
        
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de la cr√©ation: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)

@api_view(['DELETE'])
def supprimer_etape(request, affaire_id, etape_id):
    """Supprimer une √©tape et ses statuts associ√©s"""
    try:
        # V√©rifier que l'affaire existe
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        # V√©rifier que l'√©tape existe
        etape = Etapejudiciaire.objects.get(idetape=etape_id, idaffaire=affaire)
        
        # Supprimer d'abord tous les statuts associ√©s √† cette √©tape
        StatutEtape.objects.filter(idetape=etape).delete()
        
        #  supprimer l'√©tape
        etape.delete()
        
        return Response({'message': '√âtape supprim√©e avec succ√®s'}, status=status.HTTP_200_OK)
        
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Etapejudiciaire.DoesNotExist:
        return Response({'error': '√âtape non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': f'Erreur lors de la suppression: {str(e)}'}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET'])
def get_huissiers_disponibles(request):
    """R√©cup√©rer la liste des huissiers pour l'autocompl√©tion"""
    try:
        huissiers = Huissier.objects.all().values('idhuissier', 'nomhuissier', 'adressehuissier', 'telephonehuissier')
        return Response(huissiers, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
def get_opposants_disponibles(request):
    """R√©cup√©rer la liste des opposants pour l'autocompl√©tion"""
    try:
        opposants = Opposant.objects.all().values('idopposant', 'nomopposant_fr', 'nomopposant_ar', 'adresse1_fr', 'adresse1_ar', 'adresse2_fr', 'adresse2_ar', 'numtel1', 'numtel2', 'email')
        return Response(opposants, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET', 'POST'])
def update_notification_settings(request, affaire_id):
    """G√©rer les param√®tres de notification (huissier et opposant)"""
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        if request.method == 'GET':
            # R√©cup√©rer les param√®tres actuels
            return Response({
                'huissier_id': affaire.huissier_notification_id,
                'opposant_id': affaire.opposant_notification_id
            }, status=status.HTTP_200_OK)
        
        elif request.method == 'POST':
            # Mettre √† jour les champs de notification
            if 'huissier_id' in request.data:
                affaire.huissier_notification_id = request.data['huissier_id']
            if 'opposant_id' in request.data:
                affaire.opposant_notification_id = request.data['opposant_id']
            
            affaire.save()
            
            return Response({'message': 'Param√®tres de notification mis √† jour'}, status=status.HTTP_200_OK)
            
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# =============================================================================
# VUES DE GESTION DES FICHIERS
# =============================================================================
# Vues d'API pour l'upload et la gestion des fichiers

@api_view(['POST'])
def upload_fichier_etape(request, affaire_id, etape_id=None):
    # API pour uploader un fichier associ√© √† une √©tape
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        fichier = request.FILES.get('fichier')
        type_fichier = request.data.get('type_fichier', 'PIECE_PROCEDURE')
        description = request.data.get('description', '')
        
        if not fichier:
            return Response({'error': 'Aucun fichier fourni'}, status=400)
        
        # Cr√©er un nom de fichier sp√©cifique √† l'√©tape si etape_id est fourni
        if etape_id:
            nom_fichier = f"etape_{etape_id}_{fichier.name}"
            description = f"Document pour √©tape {etape_id} - {description}"
        else:
            nom_fichier = fichier.name
        
        # Cr√©er le fichier dans la base
        fichier_obj = Fichier.objects.create(
            affaire=affaire,
            nom_fichier=nom_fichier,
            fichier=fichier,
            type_fichier=type_fichier,
            description=description,
            upload_par=request.user if request.user.is_authenticated else None
        )
        
        return Response({
            'message': 'Fichier upload√© avec succ√®s',
            'fichier_id': fichier_obj.id,
            'nom_fichier': fichier_obj.nom_fichier,
            'type_fichier': fichier_obj.type_fichier,
            'etape_id': etape_id
        })
        
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=404)
    except Exception as e:
        return Response({'error': f'Erreur lors de l\'upload: {str(e)}'}, status=500)

@api_view(['GET'])
def get_fichiers_affaire(request, affaire_id):
    # API pour r√©cup√©rer tous les fichiers d'une affaire
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        fichiers = Fichier.objects.filter(affaire=affaire)
        
        serializer = FichierSerializer(fichiers, many=True, context={'request': request})
        return Response(serializer.data)
        
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=404)
    except Exception as e:
        return Response({'error': f'Erreur: {str(e)}'}, status=500)

@api_view(['GET'])
def get_tous_fichiers(request):
    # API simple: retourne tous les fichiers avec info d'affaire
    try:
        fichiers = Fichier.objects.select_related('affaire', 'upload_par').all().order_by('-date_upload')
        serializer = FichierSerializer(fichiers, many=True, context={'request': request})
        return Response(serializer.data)
    except Exception as e:
        return Response({'error': f'Erreur: {str(e)}'}, status=500)

@api_view(['GET'])
def get_tous_documents(request):
    # Agr√®ge contrats et fichiers d'affaire dans un m√™me flux pour l'UI
    try:
        # Fichiers d'affaire
        fichiers = Fichier.objects.select_related('affaire', 'upload_par', 'affaire__idclient').all()
        fichiers_data = FichierSerializer(fichiers, many=True, context={'request': request}).data

        # Contrats
        contrats = Contrat.objects.select_related('idclient').all()
        contrats_data = ContratSerializer(contrats, many=True, context={'request': request}).data

        # Normalisation minimale des contrats pour s'aligner avec FichierSerializer
        normalized_contrats = []
        for c in contrats_data:
            # Trouver l'affaire correspondante pour ce contrat (via le client)
            affaire_info = None
            if c.get('client_id'):
                try:
                    affaire = Affairejudiciaire.objects.filter(
                        idclient_id=c.get('client_id')
                    ).order_by('-dateouverture').first()  # Prendre la plus r√©cente
                    
                    if affaire:
                        affaire_info = {
                            'affaire_id': affaire.idaffaire,
                            'affaire_reference': f"{affaire.numero_dossier or '-'}/{affaire.code_dossier or '-'}/{affaire.annee_dossier or '-'}",
                            'affaire_numero_dossier': affaire.numero_dossier,
                            'affaire_code_dossier': affaire.code_dossier,
                            'affaire_annee_dossier': affaire.annee_dossier,
                        }
                except Exception as e:
                    print(f"Erreur lors de la recherche d'affaire pour contrat {c.get('idcontrat')}: {e}")
            
            normalized_contrats.append({
                'id': c.get('idcontrat'),
                'nom_fichier': c.get('nom_fichier'),
                'type_fichier': 'CONTRAT',
                'description': None,
                'date_upload': None,
                'version': None,
                'public': None,
                'upload_par_username': None,
                'affaire_id': affaire_info['affaire_id'] if affaire_info else None,
                'affaire_reference': affaire_info['affaire_reference'] if affaire_info else None,
                'affaire_numero_dossier': affaire_info['affaire_numero_dossier'] if affaire_info else None,
                'affaire_code_dossier': affaire_info['affaire_code_dossier'] if affaire_info else None,
                'affaire_annee_dossier': affaire_info['affaire_annee_dossier'] if affaire_info else None,
                'client_id': c.get('client_id'),
                'client_nom': c.get('client_nom'),
                'doc_type': 'CONTRAT',
                'url': c.get('url'),
            })

        normalized_fichiers = []
        for f in fichiers_data:
            normalized_fichiers.append({
                **f,
                'id': f.get('id'),
                'doc_type': 'FICHIER',
            })

        merged = sorted([*normalized_contrats, *normalized_fichiers], key=lambda d: d.get('date_upload') or '', reverse=True)
        return Response(merged)
    except Exception as e:
        return Response({'error': f'Erreur: {str(e)}'}, status=500)

@api_view(['GET'])
def get_fichiers_etape(request, affaire_id, etape_id):
    # API pour r√©cup√©rer les fichiers d'une √©tape sp√©cifique
    try:
        affaire = Affairejudiciaire.objects.get(idaffaire=affaire_id)
        
        # Filtrer les fichiers par le pr√©fixe de l'√©tape
        fichiers = Fichier.objects.filter(
            affaire=affaire,
            nom_fichier__startswith=f"etape_{etape_id}_"
        )
        
        fichiers_data = []
        for fichier in fichiers:
            fichiers_data.append({
                'id': fichier.id,
                'nom_fichier': fichier.nom_fichier,
                'description': fichier.description,
                'type_fichier': fichier.type_fichier,
                'url': request.build_absolute_uri(fichier.fichier.url),
                'date_upload': fichier.date_upload,
                'upload_par': fichier.upload_par.username if fichier.upload_par else None
            })
        
        return Response(fichiers_data)
        
    except Affairejudiciaire.DoesNotExist:
        return Response({'error': 'Affaire non trouv√©e'}, status=404)
    except Exception as e:
        return Response({'error': f'Erreur: {str(e)}'}, status=500)

@api_view(['DELETE'])
def supprimer_audience(request, audience_id):
    # Supprimer une audience et ses statuts associ√©s
    try:
        # R√©cup√©rer l'audience
        audience = Audience.objects.get(idaudience=audience_id)
        
        # Supprimer d'abord tous les statuts associ√©s
        statuts_supprimes = StatutAudience.objects.filter(idaudience=audience).delete()
        print(f"‚úÖ {statuts_supprimes[0]} statut(s) supprim√©(s) pour l'audience {audience_id}")
        
        # Supprimer l'audience
        audience.delete()
        print(f"‚úÖ Audience {audience_id} supprim√©e avec succ√®s")
        
        return Response({
            'message': f'Audience {audience_id} supprim√©e avec succ√®s',
            'statuts_supprimes': statuts_supprimes[0]
        })
        
    except Audience.DoesNotExist:
        return Response({
            'error': f'Audience {audience_id} non trouv√©e'
        }, status=status.HTTP_404_NOT_FOUND)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression de l'audience {audience_id}: {str(e)}")
        return Response({
            'error': f'Erreur lors de la suppression: {str(e)}'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


# =============================================================================
# VUES DE NOTIFICATIONS ET RAPPELS
# =============================================================================
# Vues d'API pour la gestion des notifications et rappels

@api_view(['POST'])
def trigger_rdv_reminders(request):
    # D√©clenche l'envoi des rappels de rendez-vous (pour cron job)
    try:
        from .services import NotificationService
        result = NotificationService.check_and_send_rdv_reminders()
        
        if result:
            return Response({
                'success': True,
                'message': 'Rappels trait√©s avec succ√®s',
                'rappels_24h_envoyes': result.get('rappels_24h_envoyes', 0),
                'rappels_1h_envoyes': result.get('rappels_1h_envoyes', 0)
            })
        else:
            return Response({
                'success': False,
                'message': 'Erreur lors du traitement des rappels'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
    except Exception as e:
        return Response({
            'success': False,
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# device
# =============================================================================
# VIEWSETS DE NOTIFICATIONS ET SYST√àME
# =============================================================================
# ViewSets pour la gestion des notifications et du syst√®me

class DeviceViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = DeviceSerializer

    def get_queryset(self):
        return Device.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

# notification
class NotificationViewSet(viewsets.ReadOnlyModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = NotificationSerializer

    def get_queryset(self):
        queryset = Notification.objects.filter(user=self.request.user)
        unread = self.request.query_params.get('unread')
        if unread in ('1', 'true', 'True'):
            queryset = queryset.filter(read_at__isnull=True)
        return queryset

    @action(detail=True, methods=['patch'])
    def read(self, request, pk=None):
        notif = self.get_object()
        if notif.read_at is None:
            notif.read_at = timezone.now()
            notif.save(update_fields=['read_at'])
        return Response({'status': 'ok'})

    @action(detail=False, methods=['post'])
    def mark_all_read(self, request):
        Notification.objects.filter(user=request.user, read_at__isnull=True).update(read_at=timezone.now())
        return Response({'status': 'ok'})

    @action(detail=False, methods=['get'])
    def unread_count(self, request):
        count = Notification.objects.filter(user=request.user, read_at__isnull=True).count()
        return Response({'count': count})




# Endpoints pour permettre aux utilisateurs de r√©initialiser leur mot de passe


from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.contrib.auth.password_validation import validate_password
from django.utils.encoding import force_bytes, force_str
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.core.exceptions import ValidationError

# Instance du g√©n√©rateur de tokens Django pour la r√©initialisation de mot de passe

token_generator = PasswordResetTokenGenerator()

"""
    Fonctionnement:
    1. L'utilisateur saisit son nom d'utilisateur
    2. Le syst√®me v√©rifie si l'utilisateur existe et est actif
    3. Si oui, g√©n√®re un lien s√©curis√© avec uid et token
    4. Retourne le lien √† afficher 

    Payload attendu:
    {
        "username": "nom_utilisateur"
    }

    R√©ponse:
    - Succ√®s: {"reset_link": "http://localhost:3000/reset-password/uid/token"}
    - Erreur: {"error": "Utilisateur non trouv√©"}
    """
@api_view(["POST"])
@permission_classes([AllowAny])
def password_reset_request(request):

    try:
        # R√©cup√©rer le nom d'utilisateur depuis la requ√™te
        username = request.data.get("username")
        
        # V√©rifier que le nom d'utilisateur est fourni
        if not username:
            return Response({
                "error": "Le nom d'utilisateur est requis"
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Chercher l'utilisateur dans la base de donn√©es + is_active=True

        user = User.objects.filter(username=username, is_active=True).first()
        
        # Si l'utilisateur n'existe pas ou n'est pas actif
        if not user:
            return Response({
                "error": "Utilisateur non trouv√©"
            }, status=status.HTTP_404_NOT_FOUND)
        
        # G√©n√©rer un identifiant unique s√©curis√© pour l'utilisateur
        # urlsafe_base64_encode convertit l'ID utilisateur en une cha√Æne s√©curis√©e
        uid = urlsafe_base64_encode(force_bytes(user.pk))
        
        # G√©n√©rer un token de r√©initialisation s√©curis√©,expire automatiquement et est unique pour cet utilisateur

        token = token_generator.make_token(user)
        

        # Ce lien sera affich√© √† l'utilisateur pour qu'il puisse cliquer dessus
        reset_link = f"http://localhost:3000/reset-password/{uid}/{token}"
        
        # Retourner le lien de r√©initialisation
        return Response({
            "reset_link": reset_link,
            "message": "Lien de r√©initialisation g√©n√©r√© avec succ√®s"
        })
        
    except Exception as e:
        # En cas d'erreur inattendue, retourner une erreur g√©n√©rique
        print(f"‚ùå Erreur lors de la demande de r√©initialisation: {str(e)}")
        return Response({
            "error": "Erreur lors de la g√©n√©ration du lien de r√©initialisation"
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


"""
   Fonctionnement:
   1. L'utilisateur clique sur le lien de r√©initialisation
   2. Il saisit son nouveau mot de passe
   3. Le syst√®me valide le token et met √† jour le mot de passe

   Payload attendu:
   {
       "uid": "uidb64_encod√©",
       "token": "token_de_r√©initialisation", 
       "new_password": "nouveau_mot_de_passe"
   }

   R√©ponse:
   - Succ√®s: {"success": "Mot de passe chang√© avec succ√®s"}
   - Erreur: {"error": "Description de l'erreur"}
   """

@api_view(["POST"])
@permission_classes([AllowAny])
def password_reset_confirm(request):

    try:
        # R√©cup√©rer les donn√©es de la requ√™te
        uid = request.data.get("uid")
        token = request.data.get("token")
        new_password = request.data.get("new_password")
        
        # V√©rifier que toutes les donn√©es requises sont pr√©sentes
        if not all([uid, token, new_password]):
            return Response({
                "error": "Tous les champs sont requis (uid, token, new_password)"
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # D√©coder l'identifiant utilisateur depuis la cha√Æne s√©curis√©e
        try:
            user_id = force_str(urlsafe_base64_decode(uid))
            user = User.objects.get(pk=user_id, is_active=True)
        except (TypeError, ValueError, OverflowError, User.DoesNotExist):
            # Si le d√©codage √©choue ou l'utilisateur n'existe pas
            return Response({
                "error": "Lien de r√©initialisation invalide"
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # V√©rifier que le token de r√©initialisation est valide

        if not token_generator.check_token(user, token):
            return Response({
                "error": "Token de r√©initialisation invalide ou expir√©"
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Valider le nouveau mot de passe selon les r√®gles Django: complexit√©, longueur...

        try:
            validate_password(new_password, user)
        except ValidationError as e:
            # Si le mot de passe ne respecte pas les r√®gles de validation
            return Response({
                "error": e.messages
            }, status=status.HTTP_400_BAD_REQUEST)
        
        # Mettre √† jour le mot de passe de l'utilisateur
        # set_password() hash automatiquement le mot de passe
        user.set_password(new_password)
        user.save()
        
        # Retourner un message de succ√®s
        return Response({
            "success": "Mot de passe chang√© avec succ√®s"
        })
        
    except Exception as e:
        # En cas d'erreur inattendue, retourner une erreur g√©n√©rique
        print(f"‚ùå Erreur lors de la confirmation de r√©initialisation: {str(e)}")
        return Response({
            "error": "Erreur lors de la r√©initialisation du mot de passe"
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

